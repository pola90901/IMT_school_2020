
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000063c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000b16  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:

//#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void UART_init(long USART_BAUDRATE)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	00 d0       	rcall	.+0      	; 0x76 <UART_init+0xa>
  76:	00 d0       	rcall	.+0      	; 0x78 <UART_init+0xc>
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
  7c:	69 83       	std	Y+1, r22	; 0x01
  7e:	7a 83       	std	Y+2, r23	; 0x02
  80:	8b 83       	std	Y+3, r24	; 0x03
  82:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
  84:	aa e2       	ldi	r26, 0x2A	; 42
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ea e2       	ldi	r30, 0x2A	; 42
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
  92:	a0 e4       	ldi	r26, 0x40	; 64
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e0 e4       	ldi	r30, 0x40	; 64
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	86 68       	ori	r24, 0x86	; 134
  9e:	8c 93       	st	X, r24
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
  a0:	09 e2       	ldi	r16, 0x29	; 41
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	ab 81       	ldd	r26, Y+3	; 0x03
  aa:	bc 81       	ldd	r27, Y+4	; 0x04
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	aa 1f       	adc	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	aa 1f       	adc	r26, r26
  ba:	bb 1f       	adc	r27, r27
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	aa 1f       	adc	r26, r26
  c2:	bb 1f       	adc	r27, r27
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	aa 1f       	adc	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	9c 01       	movw	r18, r24
  ce:	ad 01       	movw	r20, r26
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	92 e1       	ldi	r25, 0x12	; 18
  d4:	aa e7       	ldi	r26, 0x7A	; 122
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodsi4>
  e0:	da 01       	movw	r26, r20
  e2:	c9 01       	movw	r24, r18
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	f8 01       	movw	r30, r16
  e8:	80 83       	st	Z, r24
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
  ea:	00 e4       	ldi	r16, 0x40	; 64
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	ab 81       	ldd	r26, Y+3	; 0x03
  f4:	bc 81       	ldd	r27, Y+4	; 0x04
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	aa 1f       	adc	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	aa 1f       	adc	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	aa 1f       	adc	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	9c 01       	movw	r18, r24
 118:	ad 01       	movw	r20, r26
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	92 e1       	ldi	r25, 0x12	; 18
 11e:	aa e7       	ldi	r26, 0x7A	; 122
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodsi4>
 12a:	da 01       	movw	r26, r20
 12c:	c9 01       	movw	r24, r18
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	a1 09       	sbc	r26, r1
 132:	b1 09       	sbc	r27, r1
 134:	89 2f       	mov	r24, r25
 136:	9a 2f       	mov	r25, r26
 138:	ab 2f       	mov	r26, r27
 13a:	bb 27       	eor	r27, r27
 13c:	f8 01       	movw	r30, r16
 13e:	80 83       	st	Z, r24
}
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <UART_SndChr>:

void UART_SndChr(u8 data)
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	while ((UCSRA & (1 << UDRE)) == 0);/* Wait till data is received */
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 72       	andi	r24, 0x20	; 32
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	b9 f3       	breq	.-18     	; 0x15e <UART_SndChr+0xc>
	UDR = data;			/* Return the byte*/
 170:	ec e2       	ldi	r30, 0x2C	; 44
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <UART_GetChr>:

u8 UART_GetChr(void)
{
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
	while (! (UCSRA & (1<<RXC)));	/* Wait for empty transmit buffer*/
 188:	eb e2       	ldi	r30, 0x2B	; 43
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	dc f7       	brge	.-10     	; 0x188 <UART_GetChr+0x8>
	return(UDR) ;
 192:	ec e2       	ldi	r30, 0x2C	; 44
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
}
 198:	cf 91       	pop	r28
 19a:	df 91       	pop	r29
 19c:	08 95       	ret

0000019e <UART_SendString>:

void UART_SendString(char *str)
{
 19e:	df 93       	push	r29
 1a0:	cf 93       	push	r28
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <UART_SendString+0x6>
 1a4:	0f 92       	push	r0
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	9b 83       	std	Y+3, r25	; 0x03
 1ac:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char j=0;
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	0e c0       	rjmp	.+28     	; 0x1ce <UART_SendString+0x30>

	while (str[j]!=0)		/* Send string till null */
	{
		UART_SndChr(str[j]);
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	9b 81       	ldd	r25, Y+3	; 0x03
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	80 81       	ld	r24, Z
 1c4:	0e 94 a9 00 	call	0x152	; 0x152 <UART_SndChr>
		j++;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	9b 81       	ldd	r25, Y+3	; 0x03
 1d8:	fc 01       	movw	r30, r24
 1da:	e2 0f       	add	r30, r18
 1dc:	f3 1f       	adc	r31, r19
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	39 f7       	brne	.-50     	; 0x1b2 <UART_SendString+0x14>
	{
		UART_SndChr(str[j]);
		j++;
	}
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	08 95       	ret

000001f0 <main>:

int main()
{
 1f0:	df 93       	push	r29
 1f2:	cf 93       	push	r28
 1f4:	0f 92       	push	r0
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;     //for LEDs
 1fa:	ea e3       	ldi	r30, 0x3A	; 58
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	80 83       	st	Z, r24

	UART_init(9600);
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	75 e2       	ldi	r23, 0x25	; 37
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>

	UART_SndChr('A');
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	0e 94 a9 00 	call	0x152	; 0x152 <UART_SndChr>
	UART_SndChr('H');
 214:	88 e4       	ldi	r24, 0x48	; 72
 216:	0e 94 a9 00 	call	0x152	; 0x152 <UART_SndChr>
	UART_SndChr('M');
 21a:	8d e4       	ldi	r24, 0x4D	; 77
 21c:	0e 94 a9 00 	call	0x152	; 0x152 <UART_SndChr>
	UART_SndChr('E');
 220:	85 e4       	ldi	r24, 0x45	; 69
 222:	0e 94 a9 00 	call	0x152	; 0x152 <UART_SndChr>
	UART_SndChr('D');
 226:	84 e4       	ldi	r24, 0x44	; 68
 228:	0e 94 a9 00 	call	0x152	; 0x152 <UART_SndChr>
while (1)
{
	u8 x=UART_GetChr();
 22c:	0e 94 c0 00 	call	0x180	; 0x180 <UART_GetChr>
 230:	89 83       	std	Y+1, r24	; 0x01
if(x==1)
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	d1 f7       	brne	.-12     	; 0x22c <main+0x3c>
{
	PORTA=0x01;
 238:	eb e3       	ldi	r30, 0x3B	; 59
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 83       	st	Z, r24
 240:	f5 cf       	rjmp	.-22     	; 0x22c <main+0x3c>

00000242 <__udivmodsi4>:
 242:	a1 e2       	ldi	r26, 0x21	; 33
 244:	1a 2e       	mov	r1, r26
 246:	aa 1b       	sub	r26, r26
 248:	bb 1b       	sub	r27, r27
 24a:	fd 01       	movw	r30, r26
 24c:	0d c0       	rjmp	.+26     	; 0x268 <__udivmodsi4_ep>

0000024e <__udivmodsi4_loop>:
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	ee 1f       	adc	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	a2 17       	cp	r26, r18
 258:	b3 07       	cpc	r27, r19
 25a:	e4 07       	cpc	r30, r20
 25c:	f5 07       	cpc	r31, r21
 25e:	20 f0       	brcs	.+8      	; 0x268 <__udivmodsi4_ep>
 260:	a2 1b       	sub	r26, r18
 262:	b3 0b       	sbc	r27, r19
 264:	e4 0b       	sbc	r30, r20
 266:	f5 0b       	sbc	r31, r21

00000268 <__udivmodsi4_ep>:
 268:	66 1f       	adc	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	88 1f       	adc	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	1a 94       	dec	r1
 272:	69 f7       	brne	.-38     	; 0x24e <__udivmodsi4_loop>
 274:	60 95       	com	r22
 276:	70 95       	com	r23
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	9b 01       	movw	r18, r22
 27e:	ac 01       	movw	r20, r24
 280:	bd 01       	movw	r22, r26
 282:	cf 01       	movw	r24, r30
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
