
interput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c84  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000abc  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000474  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f5 05 	call	0xbea	; 0xbea <main>
  64:	0c 94 40 06 	jmp	0xc80	; 0xc80 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_SetPinDirection>:
#include "regiester.h"
#include "Dio.h"


void Dio_SetPinDirection(u8 PH_PortID,u8 PH_PinID,u8 Direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <Dio_SetPinDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <Dio_SetPinDirection+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	switch(PH_PortID)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <Dio_SetPinDirection+0x2a>
  94:	48 c0       	rjmp	.+144    	; 0x126 <Dio_SetPinDirection+0xba>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	23 30       	cpi	r18, 0x03	; 3
  9c:	31 05       	cpc	r19, r1
  9e:	34 f4       	brge	.+12     	; 0xac <Dio_SetPinDirection+0x40>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	91 05       	cpc	r25, r1
  a8:	71 f0       	breq	.+28     	; 0xc6 <Dio_SetPinDirection+0x5a>
  aa:	cb c0       	rjmp	.+406    	; 0x242 <Dio_SetPinDirection+0x1d6>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	23 30       	cpi	r18, 0x03	; 3
  b2:	31 05       	cpc	r19, r1
  b4:	09 f4       	brne	.+2      	; 0xb8 <Dio_SetPinDirection+0x4c>
  b6:	67 c0       	rjmp	.+206    	; 0x186 <Dio_SetPinDirection+0x11a>
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	91 05       	cpc	r25, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <Dio_SetPinDirection+0x58>
  c2:	91 c0       	rjmp	.+290    	; 0x1e6 <Dio_SetPinDirection+0x17a>
  c4:	be c0       	rjmp	.+380    	; 0x242 <Dio_SetPinDirection+0x1d6>
	{
	case PH_PORTA://physical port A
		if(Direction == INPUT_DIRECTION) // input
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	88 23       	and	r24, r24
  ca:	a9 f4       	brne	.+42     	; 0xf6 <Dio_SetPinDirection+0x8a>
		{
			clear_bit(reg_DDRA,PH_PinID);
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_SetPinDirection+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_SetPinDirection+0x7a>
  ee:	80 95       	com	r24
  f0:	84 23       	and	r24, r20
  f2:	8c 93       	st	X, r24
  f4:	a6 c0       	rjmp	.+332    	; 0x242 <Dio_SetPinDirection+0x1d6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	09 f0       	breq	.+2      	; 0xfe <Dio_SetPinDirection+0x92>
  fc:	a2 c0       	rjmp	.+324    	; 0x242 <Dio_SetPinDirection+0x1d6>
		{
			set_bit(reg_DDRA,PH_PinID);
  fe:	aa e3       	ldi	r26, 0x3A	; 58
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	ea e3       	ldi	r30, 0x3A	; 58
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <Dio_SetPinDirection+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Dio_SetPinDirection+0xac>
 120:	84 2b       	or	r24, r20
 122:	8c 93       	st	X, r24
 124:	8e c0       	rjmp	.+284    	; 0x242 <Dio_SetPinDirection+0x1d6>

		}
		break;
	case PH_PORTB: //physical port b
		if(Direction == INPUT_DIRECTION) // input
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	88 23       	and	r24, r24
 12a:	a9 f4       	brne	.+42     	; 0x156 <Dio_SetPinDirection+0xea>
		{
			clear_bit(reg_DDRB,PH_PinID);
 12c:	a7 e3       	ldi	r26, 0x37	; 55
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e7 e3       	ldi	r30, 0x37	; 55
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <Dio_SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Dio_SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	76 c0       	rjmp	.+236    	; 0x242 <Dio_SetPinDirection+0x1d6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	09 f0       	breq	.+2      	; 0x15e <Dio_SetPinDirection+0xf2>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <Dio_SetPinDirection+0x1d6>
		{
			set_bit(reg_DDRB,PH_PinID);
 15e:	a7 e3       	ldi	r26, 0x37	; 55
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e7 e3       	ldi	r30, 0x37	; 55
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <Dio_SetPinDirection+0x110>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <Dio_SetPinDirection+0x10c>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	5e c0       	rjmp	.+188    	; 0x242 <Dio_SetPinDirection+0x1d6>



		break;
	case PH_PORTC://physical port c
		if(Direction == INPUT_DIRECTION) // input
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	88 23       	and	r24, r24
 18a:	a9 f4       	brne	.+42     	; 0x1b6 <Dio_SetPinDirection+0x14a>
		{
			clear_bit(reg_DDRC,PH_PinID);
 18c:	a4 e3       	ldi	r26, 0x34	; 52
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e4 e3       	ldi	r30, 0x34	; 52
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	48 2f       	mov	r20, r24
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 2e       	mov	r0, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_SetPinDirection+0x13e>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Dio_SetPinDirection+0x13a>
 1ae:	80 95       	com	r24
 1b0:	84 23       	and	r24, r20
 1b2:	8c 93       	st	X, r24
 1b4:	46 c0       	rjmp	.+140    	; 0x242 <Dio_SetPinDirection+0x1d6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <Dio_SetPinDirection+0x152>
 1bc:	42 c0       	rjmp	.+132    	; 0x242 <Dio_SetPinDirection+0x1d6>
		{
			set_bit(reg_DDRC,PH_PinID);
 1be:	a4 e3       	ldi	r26, 0x34	; 52
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e4 e3       	ldi	r30, 0x34	; 52
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	48 2f       	mov	r20, r24
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 2e       	mov	r0, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Dio_SetPinDirection+0x170>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <Dio_SetPinDirection+0x16c>
 1e0:	84 2b       	or	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	2e c0       	rjmp	.+92     	; 0x242 <Dio_SetPinDirection+0x1d6>
		}


		break;
	case PH_PORTD://physical port d
		if(Direction == INPUT_DIRECTION) // input
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	88 23       	and	r24, r24
 1ea:	a9 f4       	brne	.+42     	; 0x216 <Dio_SetPinDirection+0x1aa>
		{
			clear_bit(reg_DDRD,PH_PinID);
 1ec:	a1 e3       	ldi	r26, 0x31	; 49
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	e1 e3       	ldi	r30, 0x31	; 49
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	48 2f       	mov	r20, r24
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 2e       	mov	r0, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <Dio_SetPinDirection+0x19e>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <Dio_SetPinDirection+0x19a>
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	8c 93       	st	X, r24
 214:	16 c0       	rjmp	.+44     	; 0x242 <Dio_SetPinDirection+0x1d6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	99 f4       	brne	.+38     	; 0x242 <Dio_SetPinDirection+0x1d6>
		{
			set_bit(reg_DDRD,PH_PinID);
 21c:	a1 e3       	ldi	r26, 0x31	; 49
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e1 e3       	ldi	r30, 0x31	; 49
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <Dio_SetPinDirection+0x1ce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <Dio_SetPinDirection+0x1ca>
 23e:	84 2b       	or	r24, r20
 240:	8c 93       	st	X, r24
		break;

		/* default:error code to return
		   break;*/
	}
}
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	08 95       	ret

00000252 <Dio_WritePin>:

void Dio_WritePin(u8 PH_PortID,u8 PH_PinID,u8 Level)
{
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	00 d0       	rcall	.+0      	; 0x258 <Dio_WritePin+0x6>
 258:	00 d0       	rcall	.+0      	; 0x25a <Dio_WritePin+0x8>
 25a:	0f 92       	push	r0
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	6a 83       	std	Y+2, r22	; 0x02
 264:	4b 83       	std	Y+3, r20	; 0x03

	switch(PH_PortID)
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	3d 83       	std	Y+5, r19	; 0x05
 26e:	2c 83       	std	Y+4, r18	; 0x04
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	9d 81       	ldd	r25, Y+5	; 0x05
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	91 05       	cpc	r25, r1
 278:	09 f4       	brne	.+2      	; 0x27c <Dio_WritePin+0x2a>
 27a:	48 c0       	rjmp	.+144    	; 0x30c <Dio_WritePin+0xba>
 27c:	2c 81       	ldd	r18, Y+4	; 0x04
 27e:	3d 81       	ldd	r19, Y+5	; 0x05
 280:	23 30       	cpi	r18, 0x03	; 3
 282:	31 05       	cpc	r19, r1
 284:	34 f4       	brge	.+12     	; 0x292 <Dio_WritePin+0x40>
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	9d 81       	ldd	r25, Y+5	; 0x05
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 05       	cpc	r25, r1
 28e:	71 f0       	breq	.+28     	; 0x2ac <Dio_WritePin+0x5a>
 290:	cb c0       	rjmp	.+406    	; 0x428 <Dio_WritePin+0x1d6>
 292:	2c 81       	ldd	r18, Y+4	; 0x04
 294:	3d 81       	ldd	r19, Y+5	; 0x05
 296:	23 30       	cpi	r18, 0x03	; 3
 298:	31 05       	cpc	r19, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <Dio_WritePin+0x4c>
 29c:	67 c0       	rjmp	.+206    	; 0x36c <Dio_WritePin+0x11a>
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	9d 81       	ldd	r25, Y+5	; 0x05
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	91 05       	cpc	r25, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <Dio_WritePin+0x58>
 2a8:	91 c0       	rjmp	.+290    	; 0x3cc <Dio_WritePin+0x17a>
 2aa:	be c0       	rjmp	.+380    	; 0x428 <Dio_WritePin+0x1d6>
	{
	case PH_PORTA://physical port A
		if(Level == LOW_LEVEL) // input
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 23       	and	r24, r24
 2b0:	a9 f4       	brne	.+42     	; 0x2dc <Dio_WritePin+0x8a>
		{
			clear_bit(reg_PORTA,PH_PinID);
 2b2:	ab e3       	ldi	r26, 0x3B	; 59
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	eb e3       	ldi	r30, 0x3B	; 59
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	48 2f       	mov	r20, r24
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Dio_WritePin+0x7e>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Dio_WritePin+0x7a>
 2d4:	80 95       	com	r24
 2d6:	84 23       	and	r24, r20
 2d8:	8c 93       	st	X, r24
 2da:	a6 c0       	rjmp	.+332    	; 0x428 <Dio_WritePin+0x1d6>

		}
		else if (Level == HIGH_LEVEL)// output
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <Dio_WritePin+0x92>
 2e2:	a2 c0       	rjmp	.+324    	; 0x428 <Dio_WritePin+0x1d6>
		{
			set_bit(reg_PORTA,PH_PinID);
 2e4:	ab e3       	ldi	r26, 0x3B	; 59
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	eb e3       	ldi	r30, 0x3B	; 59
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <Dio_WritePin+0xb0>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <Dio_WritePin+0xac>
 306:	84 2b       	or	r24, r20
 308:	8c 93       	st	X, r24
 30a:	8e c0       	rjmp	.+284    	; 0x428 <Dio_WritePin+0x1d6>

		}
		break;
	case PH_PORTB: //physical port b
		if(Level == LOW_LEVEL) // input
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	88 23       	and	r24, r24
 310:	a9 f4       	brne	.+42     	; 0x33c <Dio_WritePin+0xea>
		{
			clear_bit(reg_PORTB,PH_PinID);
 312:	a8 e3       	ldi	r26, 0x38	; 56
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e8 e3       	ldi	r30, 0x38	; 56
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <Dio_WritePin+0xde>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <Dio_WritePin+0xda>
 334:	80 95       	com	r24
 336:	84 23       	and	r24, r20
 338:	8c 93       	st	X, r24
 33a:	76 c0       	rjmp	.+236    	; 0x428 <Dio_WritePin+0x1d6>

		}
		else if (Level == HIGH_LEVEL)// output
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <Dio_WritePin+0xf2>
 342:	72 c0       	rjmp	.+228    	; 0x428 <Dio_WritePin+0x1d6>
		{
			set_bit(reg_PORTB,PH_PinID);
 344:	a8 e3       	ldi	r26, 0x38	; 56
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e8 e3       	ldi	r30, 0x38	; 56
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <Dio_WritePin+0x110>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <Dio_WritePin+0x10c>
 366:	84 2b       	or	r24, r20
 368:	8c 93       	st	X, r24
 36a:	5e c0       	rjmp	.+188    	; 0x428 <Dio_WritePin+0x1d6>



		break;
	case PH_PORTC://physical port c
		if(Level == LOW_LEVEL) // input
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	88 23       	and	r24, r24
 370:	a9 f4       	brne	.+42     	; 0x39c <Dio_WritePin+0x14a>
		{
			clear_bit(reg_PORTC,PH_PinID);
 372:	a5 e3       	ldi	r26, 0x35	; 53
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	e5 e3       	ldi	r30, 0x35	; 53
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	48 2f       	mov	r20, r24
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <Dio_WritePin+0x13e>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <Dio_WritePin+0x13a>
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	8c 93       	st	X, r24
 39a:	46 c0       	rjmp	.+140    	; 0x428 <Dio_WritePin+0x1d6>

		}
		else if (Level == HIGH_LEVEL)// output
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <Dio_WritePin+0x152>
 3a2:	42 c0       	rjmp	.+132    	; 0x428 <Dio_WritePin+0x1d6>
		{
			set_bit(reg_PORTC,PH_PinID);
 3a4:	a5 e3       	ldi	r26, 0x35	; 53
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e5 e3       	ldi	r30, 0x35	; 53
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	48 2f       	mov	r20, r24
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 2e       	mov	r0, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Dio_WritePin+0x170>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Dio_WritePin+0x16c>
 3c6:	84 2b       	or	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	2e c0       	rjmp	.+92     	; 0x428 <Dio_WritePin+0x1d6>
		}


		break;
	case PH_PORTD://physical port d
		if(Level == LOW_LEVEL) // input
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	88 23       	and	r24, r24
 3d0:	a9 f4       	brne	.+42     	; 0x3fc <Dio_WritePin+0x1aa>
		{
			clear_bit(reg_PORTD,PH_PinID);
 3d2:	a2 e3       	ldi	r26, 0x32	; 50
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e2 e3       	ldi	r30, 0x32	; 50
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <Dio_WritePin+0x19e>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <Dio_WritePin+0x19a>
 3f4:	80 95       	com	r24
 3f6:	84 23       	and	r24, r20
 3f8:	8c 93       	st	X, r24
 3fa:	16 c0       	rjmp	.+44     	; 0x428 <Dio_WritePin+0x1d6>

		}
		else if (Level == HIGH_LEVEL)// output
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	99 f4       	brne	.+38     	; 0x428 <Dio_WritePin+0x1d6>
		{
			set_bit(reg_PORTD,PH_PinID);
 402:	a2 e3       	ldi	r26, 0x32	; 50
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e2 e3       	ldi	r30, 0x32	; 50
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <Dio_WritePin+0x1ce>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <Dio_WritePin+0x1ca>
 424:	84 2b       	or	r24, r20
 426:	8c 93       	st	X, r24
		   break;*/
	}



}
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	cf 91       	pop	r28
 434:	df 91       	pop	r29
 436:	08 95       	ret

00000438 <Dio_ReadPin>:

u8 Dio_ReadPin(u8 PH_PortID,u8 PH_PinID)
{
 438:	df 93       	push	r29
 43a:	cf 93       	push	r28
 43c:	00 d0       	rcall	.+0      	; 0x43e <Dio_ReadPin+0x6>
 43e:	00 d0       	rcall	.+0      	; 0x440 <Dio_ReadPin+0x8>
 440:	0f 92       	push	r0
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	8a 83       	std	Y+2, r24	; 0x02
 448:	6b 83       	std	Y+3, r22	; 0x03
	u8 PinLevel;
  switch(PH_PortID)
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	3d 83       	std	Y+5, r19	; 0x05
 452:	2c 83       	std	Y+4, r18	; 0x04
 454:	4c 81       	ldd	r20, Y+4	; 0x04
 456:	5d 81       	ldd	r21, Y+5	; 0x05
 458:	42 30       	cpi	r20, 0x02	; 2
 45a:	51 05       	cpc	r21, r1
 45c:	41 f1       	breq	.+80     	; 0x4ae <Dio_ReadPin+0x76>
 45e:	8c 81       	ldd	r24, Y+4	; 0x04
 460:	9d 81       	ldd	r25, Y+5	; 0x05
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	91 05       	cpc	r25, r1
 466:	34 f4       	brge	.+12     	; 0x474 <Dio_ReadPin+0x3c>
 468:	2c 81       	ldd	r18, Y+4	; 0x04
 46a:	3d 81       	ldd	r19, Y+5	; 0x05
 46c:	21 30       	cpi	r18, 0x01	; 1
 46e:	31 05       	cpc	r19, r1
 470:	61 f0       	breq	.+24     	; 0x48a <Dio_ReadPin+0x52>
 472:	52 c0       	rjmp	.+164    	; 0x518 <Dio_ReadPin+0xe0>
 474:	4c 81       	ldd	r20, Y+4	; 0x04
 476:	5d 81       	ldd	r21, Y+5	; 0x05
 478:	43 30       	cpi	r20, 0x03	; 3
 47a:	51 05       	cpc	r21, r1
 47c:	51 f1       	breq	.+84     	; 0x4d2 <Dio_ReadPin+0x9a>
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	9d 81       	ldd	r25, Y+5	; 0x05
 482:	84 30       	cpi	r24, 0x04	; 4
 484:	91 05       	cpc	r25, r1
 486:	b9 f1       	breq	.+110    	; 0x4f6 <Dio_ReadPin+0xbe>
 488:	47 c0       	rjmp	.+142    	; 0x518 <Dio_ReadPin+0xe0>
   {
  case PH_PORTA:
	  PinLevel=Get_bit(reg_PINA,PH_PinID);
 48a:	e9 e3       	ldi	r30, 0x39	; 57
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	88 2f       	mov	r24, r24
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	a9 01       	movw	r20, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <Dio_ReadPin+0x6a>
 49e:	55 95       	asr	r21
 4a0:	47 95       	ror	r20
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <Dio_ReadPin+0x66>
 4a6:	ca 01       	movw	r24, r20
 4a8:	81 70       	andi	r24, 0x01	; 1
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	35 c0       	rjmp	.+106    	; 0x518 <Dio_ReadPin+0xe0>
	  break;
  case PH_PORTB:
	  PinLevel=Get_bit(reg_PINB,PH_PinID);
 4ae:	e6 e3       	ldi	r30, 0x36	; 54
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	a9 01       	movw	r20, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <Dio_ReadPin+0x8e>
 4c2:	55 95       	asr	r21
 4c4:	47 95       	ror	r20
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <Dio_ReadPin+0x8a>
 4ca:	ca 01       	movw	r24, r20
 4cc:	81 70       	andi	r24, 0x01	; 1
 4ce:	89 83       	std	Y+1, r24	; 0x01
 4d0:	23 c0       	rjmp	.+70     	; 0x518 <Dio_ReadPin+0xe0>
	  break;
  case PH_PORTC:
	  PinLevel=Get_bit(reg_PINC,PH_PinID);
 4d2:	e3 e3       	ldi	r30, 0x33	; 51
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	a9 01       	movw	r20, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <Dio_ReadPin+0xb2>
 4e6:	55 95       	asr	r21
 4e8:	47 95       	ror	r20
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <Dio_ReadPin+0xae>
 4ee:	ca 01       	movw	r24, r20
 4f0:	81 70       	andi	r24, 0x01	; 1
 4f2:	89 83       	std	Y+1, r24	; 0x01
 4f4:	11 c0       	rjmp	.+34     	; 0x518 <Dio_ReadPin+0xe0>
	  break;
  case PH_PORTD:
	  PinLevel=Get_bit(reg_PIND,PH_PinID);
 4f6:	e0 e3       	ldi	r30, 0x30	; 48
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	a9 01       	movw	r20, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <Dio_ReadPin+0xd6>
 50a:	55 95       	asr	r21
 50c:	47 95       	ror	r20
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <Dio_ReadPin+0xd2>
 512:	ca 01       	movw	r24, r20
 514:	81 70       	andi	r24, 0x01	; 1
 516:	89 83       	std	Y+1, r24	; 0x01
	  break;
   }
  return PinLevel;
 518:	89 81       	ldd	r24, Y+1	; 0x01

}
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	cf 91       	pop	r28
 526:	df 91       	pop	r29
 528:	08 95       	ret

0000052a <Dio_SetPortDirection>:
/*********************************************************/
void Dio_SetPortDirection(u8 PH_PortID,u8 Direction)
{
 52a:	df 93       	push	r29
 52c:	cf 93       	push	r28
 52e:	00 d0       	rcall	.+0      	; 0x530 <Dio_SetPortDirection+0x6>
 530:	00 d0       	rcall	.+0      	; 0x532 <Dio_SetPortDirection+0x8>
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	6a 83       	std	Y+2, r22	; 0x02
  switch (PH_PortID)
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	28 2f       	mov	r18, r24
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	3c 83       	std	Y+4, r19	; 0x04
 542:	2b 83       	std	Y+3, r18	; 0x03
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	9c 81       	ldd	r25, Y+4	; 0x04
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	91 05       	cpc	r25, r1
 54c:	29 f1       	breq	.+74     	; 0x598 <Dio_SetPortDirection+0x6e>
 54e:	2b 81       	ldd	r18, Y+3	; 0x03
 550:	3c 81       	ldd	r19, Y+4	; 0x04
 552:	23 30       	cpi	r18, 0x03	; 3
 554:	31 05       	cpc	r19, r1
 556:	34 f4       	brge	.+12     	; 0x564 <Dio_SetPortDirection+0x3a>
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	9c 81       	ldd	r25, Y+4	; 0x04
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	91 05       	cpc	r25, r1
 560:	61 f0       	breq	.+24     	; 0x57a <Dio_SetPortDirection+0x50>
 562:	46 c0       	rjmp	.+140    	; 0x5f0 <Dio_SetPortDirection+0xc6>
 564:	2b 81       	ldd	r18, Y+3	; 0x03
 566:	3c 81       	ldd	r19, Y+4	; 0x04
 568:	23 30       	cpi	r18, 0x03	; 3
 56a:	31 05       	cpc	r19, r1
 56c:	21 f1       	breq	.+72     	; 0x5b6 <Dio_SetPortDirection+0x8c>
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	9c 81       	ldd	r25, Y+4	; 0x04
 572:	84 30       	cpi	r24, 0x04	; 4
 574:	91 05       	cpc	r25, r1
 576:	71 f1       	breq	.+92     	; 0x5d4 <Dio_SetPortDirection+0xaa>
 578:	3b c0       	rjmp	.+118    	; 0x5f0 <Dio_SetPortDirection+0xc6>
  {
  case PH_PORTA:

		if(Direction == INPUT_DIRECTION) // input
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	88 23       	and	r24, r24
 57e:	21 f4       	brne	.+8      	; 0x588 <Dio_SetPortDirection+0x5e>
		{
			write_byte(reg_DDRA,0);
 580:	ea e3       	ldi	r30, 0x3A	; 58
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	10 82       	st	Z, r1
 586:	34 c0       	rjmp	.+104    	; 0x5f0 <Dio_SetPortDirection+0xc6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	89 f5       	brne	.+98     	; 0x5f0 <Dio_SetPortDirection+0xc6>
		{
			write_byte(reg_DDRA,255);
 58e:	ea e3       	ldi	r30, 0x3A	; 58
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	80 83       	st	Z, r24
 596:	2c c0       	rjmp	.+88     	; 0x5f0 <Dio_SetPortDirection+0xc6>
		}


	  break;
  case PH_PORTB:
		if(Direction == INPUT_DIRECTION) // input
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	88 23       	and	r24, r24
 59c:	21 f4       	brne	.+8      	; 0x5a6 <Dio_SetPortDirection+0x7c>
		{
			write_byte(reg_DDRB,0);
 59e:	e7 e3       	ldi	r30, 0x37	; 55
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	10 82       	st	Z, r1
 5a4:	25 c0       	rjmp	.+74     	; 0x5f0 <Dio_SetPortDirection+0xc6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	11 f5       	brne	.+68     	; 0x5f0 <Dio_SetPortDirection+0xc6>
		{
			write_byte(reg_DDRB,255);
 5ac:	e7 e3       	ldi	r30, 0x37	; 55
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	80 83       	st	Z, r24
 5b4:	1d c0       	rjmp	.+58     	; 0x5f0 <Dio_SetPortDirection+0xc6>
		}


	  break;
  case PH_PORTC:
		if(Direction == INPUT_DIRECTION) // input
 5b6:	8a 81       	ldd	r24, Y+2	; 0x02
 5b8:	88 23       	and	r24, r24
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <Dio_SetPortDirection+0x9a>
		{
			write_byte(reg_DDRC,0);
 5bc:	e4 e3       	ldi	r30, 0x34	; 52
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	10 82       	st	Z, r1
 5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <Dio_SetPortDirection+0xc6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	99 f4       	brne	.+38     	; 0x5f0 <Dio_SetPortDirection+0xc6>
		{
			write_byte(reg_DDRC,255);
 5ca:	e4 e3       	ldi	r30, 0x34	; 52
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	80 83       	st	Z, r24
 5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <Dio_SetPortDirection+0xc6>
		}


	  break;
  case PH_PORTD:
		if(Direction == INPUT_DIRECTION) // input
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	88 23       	and	r24, r24
 5d8:	21 f4       	brne	.+8      	; 0x5e2 <Dio_SetPortDirection+0xb8>
		{
			write_byte(reg_DDRD,0);
 5da:	e1 e3       	ldi	r30, 0x31	; 49
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	10 82       	st	Z, r1
 5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <Dio_SetPortDirection+0xc6>

		}
		else if (Direction == OUTPUT_DIRECTION)// output
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <Dio_SetPortDirection+0xc6>
		{
			write_byte(reg_DDRD,255);
 5e8:	e1 e3       	ldi	r30, 0x31	; 49
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	80 83       	st	Z, r24

	  break;

  }

}
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	cf 91       	pop	r28
 5fa:	df 91       	pop	r29
 5fc:	08 95       	ret

000005fe <Dio_WritePort>:

void Dio_WritePort(u8 PH_PortID,u8 data)
 {
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	00 d0       	rcall	.+0      	; 0x604 <Dio_WritePort+0x6>
 604:	00 d0       	rcall	.+0      	; 0x606 <Dio_WritePort+0x8>
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	6a 83       	std	Y+2, r22	; 0x02
	switch (PH_PortID)
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	3c 83       	std	Y+4, r19	; 0x04
 616:	2b 83       	std	Y+3, r18	; 0x03
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	9c 81       	ldd	r25, Y+4	; 0x04
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	d9 f0       	breq	.+54     	; 0x658 <Dio_WritePort+0x5a>
 622:	2b 81       	ldd	r18, Y+3	; 0x03
 624:	3c 81       	ldd	r19, Y+4	; 0x04
 626:	23 30       	cpi	r18, 0x03	; 3
 628:	31 05       	cpc	r19, r1
 62a:	34 f4       	brge	.+12     	; 0x638 <Dio_WritePort+0x3a>
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	9c 81       	ldd	r25, Y+4	; 0x04
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	91 05       	cpc	r25, r1
 634:	61 f0       	breq	.+24     	; 0x64e <Dio_WritePort+0x50>
 636:	1e c0       	rjmp	.+60     	; 0x674 <Dio_WritePort+0x76>
 638:	2b 81       	ldd	r18, Y+3	; 0x03
 63a:	3c 81       	ldd	r19, Y+4	; 0x04
 63c:	23 30       	cpi	r18, 0x03	; 3
 63e:	31 05       	cpc	r19, r1
 640:	81 f0       	breq	.+32     	; 0x662 <Dio_WritePort+0x64>
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	9c 81       	ldd	r25, Y+4	; 0x04
 646:	84 30       	cpi	r24, 0x04	; 4
 648:	91 05       	cpc	r25, r1
 64a:	81 f0       	breq	.+32     	; 0x66c <Dio_WritePort+0x6e>
 64c:	13 c0       	rjmp	.+38     	; 0x674 <Dio_WritePort+0x76>
	  {
	  case PH_PORTA:


			    write_byte(reg_PORTA,data);
 64e:	eb e3       	ldi	r30, 0x3B	; 59
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	80 83       	st	Z, r24
 656:	0e c0       	rjmp	.+28     	; 0x674 <Dio_WritePort+0x76>

		  break;
	  case PH_PORTB:


		    write_byte(reg_PORTB,data);
 658:	e8 e3       	ldi	r30, 0x38	; 56
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	80 83       	st	Z, r24
 660:	09 c0       	rjmp	.+18     	; 0x674 <Dio_WritePort+0x76>

		  break;
	  case PH_PORTC:


		    write_byte(reg_PORTC,data);
 662:	e5 e3       	ldi	r30, 0x35	; 53
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	80 83       	st	Z, r24
 66a:	04 c0       	rjmp	.+8      	; 0x674 <Dio_WritePort+0x76>

		  break;
	  case PH_PORTD:


		    write_byte(reg_PORTD,data);
 66c:	e2 e3       	ldi	r30, 0x32	; 50
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	80 83       	st	Z, r24


		  break;
	  }
 }
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	08 95       	ret

00000682 <Dio_ReadPort>:

u8 Dio_ReadPort(u8 PH_PortID)
 {
 682:	df 93       	push	r29
 684:	cf 93       	push	r28
 686:	00 d0       	rcall	.+0      	; 0x688 <Dio_ReadPort+0x6>
 688:	00 d0       	rcall	.+0      	; 0x68a <Dio_ReadPort+0x8>
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	8a 83       	std	Y+2, r24	; 0x02
	 u8 PortLevel;
	   switch(PH_PortID)
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	3c 83       	std	Y+4, r19	; 0x04
 698:	2b 83       	std	Y+3, r18	; 0x03
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	91 05       	cpc	r25, r1
 6a2:	d9 f0       	breq	.+54     	; 0x6da <Dio_ReadPort+0x58>
 6a4:	2b 81       	ldd	r18, Y+3	; 0x03
 6a6:	3c 81       	ldd	r19, Y+4	; 0x04
 6a8:	23 30       	cpi	r18, 0x03	; 3
 6aa:	31 05       	cpc	r19, r1
 6ac:	34 f4       	brge	.+12     	; 0x6ba <Dio_ReadPort+0x38>
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	91 05       	cpc	r25, r1
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <Dio_ReadPort+0x4e>
 6b8:	1e c0       	rjmp	.+60     	; 0x6f6 <Dio_ReadPort+0x74>
 6ba:	2b 81       	ldd	r18, Y+3	; 0x03
 6bc:	3c 81       	ldd	r19, Y+4	; 0x04
 6be:	23 30       	cpi	r18, 0x03	; 3
 6c0:	31 05       	cpc	r19, r1
 6c2:	81 f0       	breq	.+32     	; 0x6e4 <Dio_ReadPort+0x62>
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	9c 81       	ldd	r25, Y+4	; 0x04
 6c8:	84 30       	cpi	r24, 0x04	; 4
 6ca:	91 05       	cpc	r25, r1
 6cc:	81 f0       	breq	.+32     	; 0x6ee <Dio_ReadPort+0x6c>
 6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <Dio_ReadPort+0x74>
	    {
	   case PH_PORTA:
	 	  PortLevel=read_byte(reg_PINA);
 6d0:	e9 e3       	ldi	r30, 0x39	; 57
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <Dio_ReadPort+0x74>
	 	  break;
	   case PH_PORTB:
		   PortLevel=read_byte(reg_PINB);
 6da:	e6 e3       	ldi	r30, 0x36	; 54
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <Dio_ReadPort+0x74>
	 	  break;
	   case PH_PORTC:
		   PortLevel=read_byte(reg_PINC);
 6e4:	e3 e3       	ldi	r30, 0x33	; 51
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	89 83       	std	Y+1, r24	; 0x01
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <Dio_ReadPort+0x74>
	 	  break;
	   case PH_PORTD:
		   PortLevel=read_byte(reg_PIND);
 6ee:	e0 e3       	ldi	r30, 0x30	; 48
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	89 83       	std	Y+1, r24	; 0x01
	 	  break;
	    }
	   return PortLevel;
 6f6:	89 81       	ldd	r24, Y+1	; 0x01

 }
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	cf 91       	pop	r28
 702:	df 91       	pop	r29
 704:	08 95       	ret

00000706 <Dio_ActivatePinPullupResistor>:

void Dio_ActivatePinPullupResistor(u8 PH_PortID,u8 PH_PinID)
{
 706:	df 93       	push	r29
 708:	cf 93       	push	r28
 70a:	00 d0       	rcall	.+0      	; 0x70c <Dio_ActivatePinPullupResistor+0x6>
 70c:	00 d0       	rcall	.+0      	; 0x70e <Dio_ActivatePinPullupResistor+0x8>
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	89 83       	std	Y+1, r24	; 0x01
 714:	6a 83       	std	Y+2, r22	; 0x02
	  switch(PH_PortID)
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	28 2f       	mov	r18, r24
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	3c 83       	std	Y+4, r19	; 0x04
 71e:	2b 83       	std	Y+3, r18	; 0x03
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	9c 81       	ldd	r25, Y+4	; 0x04
 724:	82 30       	cpi	r24, 0x02	; 2
 726:	91 05       	cpc	r25, r1
 728:	09 f4       	brne	.+2      	; 0x72c <Dio_ActivatePinPullupResistor+0x26>
 72a:	46 c0       	rjmp	.+140    	; 0x7b8 <Dio_ActivatePinPullupResistor+0xb2>
 72c:	2b 81       	ldd	r18, Y+3	; 0x03
 72e:	3c 81       	ldd	r19, Y+4	; 0x04
 730:	23 30       	cpi	r18, 0x03	; 3
 732:	31 05       	cpc	r19, r1
 734:	34 f4       	brge	.+12     	; 0x742 <Dio_ActivatePinPullupResistor+0x3c>
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	9c 81       	ldd	r25, Y+4	; 0x04
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	91 05       	cpc	r25, r1
 73e:	71 f0       	breq	.+28     	; 0x75c <Dio_ActivatePinPullupResistor+0x56>
 740:	c4 c0       	rjmp	.+392    	; 0x8ca <__stack+0x6b>
 742:	2b 81       	ldd	r18, Y+3	; 0x03
 744:	3c 81       	ldd	r19, Y+4	; 0x04
 746:	23 30       	cpi	r18, 0x03	; 3
 748:	31 05       	cpc	r19, r1
 74a:	09 f4       	brne	.+2      	; 0x74e <Dio_ActivatePinPullupResistor+0x48>
 74c:	63 c0       	rjmp	.+198    	; 0x814 <Dio_ActivatePinPullupResistor+0x10e>
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	84 30       	cpi	r24, 0x04	; 4
 754:	91 05       	cpc	r25, r1
 756:	09 f4       	brne	.+2      	; 0x75a <Dio_ActivatePinPullupResistor+0x54>
 758:	8b c0       	rjmp	.+278    	; 0x870 <__stack+0x11>
 75a:	b7 c0       	rjmp	.+366    	; 0x8ca <__stack+0x6b>
		    {
		   case PH_PORTA:
                 clear_bit(reg_DDRA,PH_PinID);
 75c:	aa e3       	ldi	r26, 0x3A	; 58
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	ea e3       	ldi	r30, 0x3A	; 58
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	48 2f       	mov	r20, r24
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	28 2f       	mov	r18, r24
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <Dio_ActivatePinPullupResistor+0x72>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	2a 95       	dec	r18
 77a:	e2 f7       	brpl	.-8      	; 0x774 <Dio_ActivatePinPullupResistor+0x6e>
 77c:	80 95       	com	r24
 77e:	84 23       	and	r24, r20
 780:	8c 93       	st	X, r24
                 clear_bit(reg_SFIOR,2);
 782:	a0 e5       	ldi	r26, 0x50	; 80
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	e0 e5       	ldi	r30, 0x50	; 80
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	8b 7f       	andi	r24, 0xFB	; 251
 78e:	8c 93       	st	X, r24
                 set_bit(reg_PORTA,PH_PinID);
 790:	ab e3       	ldi	r26, 0x3B	; 59
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	eb e3       	ldi	r30, 0x3B	; 59
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	48 2f       	mov	r20, r24
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	28 2f       	mov	r18, r24
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 2e       	mov	r0, r18
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <Dio_ActivatePinPullupResistor+0xa8>
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	0a 94       	dec	r0
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <Dio_ActivatePinPullupResistor+0xa4>
 7b2:	84 2b       	or	r24, r20
 7b4:	8c 93       	st	X, r24
 7b6:	89 c0       	rjmp	.+274    	; 0x8ca <__stack+0x6b>

		 	  break;
		   case PH_PORTB:
               clear_bit(reg_DDRB,PH_PinID);
 7b8:	a7 e3       	ldi	r26, 0x37	; 55
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e7 e3       	ldi	r30, 0x37	; 55
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	48 2f       	mov	r20, r24
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	28 2f       	mov	r18, r24
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <Dio_ActivatePinPullupResistor+0xce>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	2a 95       	dec	r18
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <Dio_ActivatePinPullupResistor+0xca>
 7d8:	80 95       	com	r24
 7da:	84 23       	and	r24, r20
 7dc:	8c 93       	st	X, r24
               clear_bit(reg_SFIOR,2);
 7de:	a0 e5       	ldi	r26, 0x50	; 80
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	e0 e5       	ldi	r30, 0x50	; 80
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	8b 7f       	andi	r24, 0xFB	; 251
 7ea:	8c 93       	st	X, r24
               set_bit(reg_PORTB,PH_PinID);
 7ec:	a8 e3       	ldi	r26, 0x38	; 56
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	e8 e3       	ldi	r30, 0x38	; 56
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	48 2f       	mov	r20, r24
 7f8:	8a 81       	ldd	r24, Y+2	; 0x02
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 2e       	mov	r0, r18
 804:	02 c0       	rjmp	.+4      	; 0x80a <Dio_ActivatePinPullupResistor+0x104>
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	0a 94       	dec	r0
 80c:	e2 f7       	brpl	.-8      	; 0x806 <Dio_ActivatePinPullupResistor+0x100>
 80e:	84 2b       	or	r24, r20
 810:	8c 93       	st	X, r24
 812:	5b c0       	rjmp	.+182    	; 0x8ca <__stack+0x6b>

			   break;
		   case PH_PORTC:
               clear_bit(reg_DDRC,PH_PinID);
 814:	a4 e3       	ldi	r26, 0x34	; 52
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	e4 e3       	ldi	r30, 0x34	; 52
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 81       	ld	r24, Z
 81e:	48 2f       	mov	r20, r24
 820:	8a 81       	ldd	r24, Y+2	; 0x02
 822:	28 2f       	mov	r18, r24
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <Dio_ActivatePinPullupResistor+0x12a>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	2a 95       	dec	r18
 832:	e2 f7       	brpl	.-8      	; 0x82c <Dio_ActivatePinPullupResistor+0x126>
 834:	80 95       	com	r24
 836:	84 23       	and	r24, r20
 838:	8c 93       	st	X, r24
               clear_bit(reg_SFIOR,2);
 83a:	a0 e5       	ldi	r26, 0x50	; 80
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	e0 e5       	ldi	r30, 0x50	; 80
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	8b 7f       	andi	r24, 0xFB	; 251
 846:	8c 93       	st	X, r24
               set_bit(reg_PORTC,PH_PinID);
 848:	a5 e3       	ldi	r26, 0x35	; 53
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	e5 e3       	ldi	r30, 0x35	; 53
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	48 2f       	mov	r20, r24
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 2e       	mov	r0, r18
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
 86a:	84 2b       	or	r24, r20
 86c:	8c 93       	st	X, r24
 86e:	2d c0       	rjmp	.+90     	; 0x8ca <__stack+0x6b>
			   break;
		   case PH_PORTD:
               clear_bit(reg_DDRD,PH_PinID);
 870:	a1 e3       	ldi	r26, 0x31	; 49
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	e1 e3       	ldi	r30, 0x31	; 49
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	48 2f       	mov	r20, r24
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	28 2f       	mov	r18, r24
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	2a 95       	dec	r18
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	80 95       	com	r24
 892:	84 23       	and	r24, r20
 894:	8c 93       	st	X, r24
               clear_bit(reg_SFIOR,2);
 896:	a0 e5       	ldi	r26, 0x50	; 80
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e0 e5       	ldi	r30, 0x50	; 80
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	8b 7f       	andi	r24, 0xFB	; 251
 8a2:	8c 93       	st	X, r24
               set_bit(reg_PORTD,PH_PinID);
 8a4:	a2 e3       	ldi	r26, 0x32	; 50
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	e2 e3       	ldi	r30, 0x32	; 50
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	48 2f       	mov	r20, r24
 8b0:	8a 81       	ldd	r24, Y+2	; 0x02
 8b2:	28 2f       	mov	r18, r24
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 2e       	mov	r0, r18
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	0a 94       	dec	r0
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
 8c6:	84 2b       	or	r24, r20
 8c8:	8c 93       	st	X, r24

			   break;
		    }
}
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	0f 90       	pop	r0
 8d0:	0f 90       	pop	r0
 8d2:	cf 91       	pop	r28
 8d4:	df 91       	pop	r29
 8d6:	08 95       	ret

000008d8 <Dio_ActivatePortPullupResistor>:

void Dio_ActivatePortPullupResistor(u8 PH_PortID)
{
 8d8:	df 93       	push	r29
 8da:	cf 93       	push	r28
 8dc:	00 d0       	rcall	.+0      	; 0x8de <Dio_ActivatePortPullupResistor+0x6>
 8de:	0f 92       	push	r0
 8e0:	cd b7       	in	r28, 0x3d	; 61
 8e2:	de b7       	in	r29, 0x3e	; 62
 8e4:	89 83       	std	Y+1, r24	; 0x01
	switch(PH_PortID)
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
 8e8:	28 2f       	mov	r18, r24
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	3b 83       	std	Y+3, r19	; 0x03
 8ee:	2a 83       	std	Y+2, r18	; 0x02
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	9b 81       	ldd	r25, Y+3	; 0x03
 8f4:	82 30       	cpi	r24, 0x02	; 2
 8f6:	91 05       	cpc	r25, r1
 8f8:	21 f1       	breq	.+72     	; 0x942 <Dio_ActivatePortPullupResistor+0x6a>
 8fa:	2a 81       	ldd	r18, Y+2	; 0x02
 8fc:	3b 81       	ldd	r19, Y+3	; 0x03
 8fe:	23 30       	cpi	r18, 0x03	; 3
 900:	31 05       	cpc	r19, r1
 902:	34 f4       	brge	.+12     	; 0x910 <Dio_ActivatePortPullupResistor+0x38>
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	9b 81       	ldd	r25, Y+3	; 0x03
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	91 05       	cpc	r25, r1
 90c:	61 f0       	breq	.+24     	; 0x926 <Dio_ActivatePortPullupResistor+0x4e>
 90e:	42 c0       	rjmp	.+132    	; 0x994 <Dio_ActivatePortPullupResistor+0xbc>
 910:	2a 81       	ldd	r18, Y+2	; 0x02
 912:	3b 81       	ldd	r19, Y+3	; 0x03
 914:	23 30       	cpi	r18, 0x03	; 3
 916:	31 05       	cpc	r19, r1
 918:	11 f1       	breq	.+68     	; 0x95e <Dio_ActivatePortPullupResistor+0x86>
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	9b 81       	ldd	r25, Y+3	; 0x03
 91e:	84 30       	cpi	r24, 0x04	; 4
 920:	91 05       	cpc	r25, r1
 922:	59 f1       	breq	.+86     	; 0x97a <Dio_ActivatePortPullupResistor+0xa2>
 924:	37 c0       	rjmp	.+110    	; 0x994 <Dio_ActivatePortPullupResistor+0xbc>
			    {
			   case PH_PORTA:
				   write_byte(reg_DDRA,0);
 926:	ea e3       	ldi	r30, 0x3A	; 58
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	10 82       	st	Z, r1
	                clear_bit(reg_SFIOR,2);
 92c:	a0 e5       	ldi	r26, 0x50	; 80
 92e:	b0 e0       	ldi	r27, 0x00	; 0
 930:	e0 e5       	ldi	r30, 0x50	; 80
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	8b 7f       	andi	r24, 0xFB	; 251
 938:	8c 93       	st	X, r24
	                write_byte(reg_PORTA,0);
 93a:	eb e3       	ldi	r30, 0x3B	; 59
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	10 82       	st	Z, r1
 940:	29 c0       	rjmp	.+82     	; 0x994 <Dio_ActivatePortPullupResistor+0xbc>

			 	  break;
			   case PH_PORTB:
				   write_byte(reg_DDRB,0);
 942:	e7 e3       	ldi	r30, 0x37	; 55
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	10 82       	st	Z, r1
	                clear_bit(reg_SFIOR,2);
 948:	a0 e5       	ldi	r26, 0x50	; 80
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	e0 e5       	ldi	r30, 0x50	; 80
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	8b 7f       	andi	r24, 0xFB	; 251
 954:	8c 93       	st	X, r24
	                write_byte(reg_PORTB,0);
 956:	e8 e3       	ldi	r30, 0x38	; 56
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	10 82       	st	Z, r1
 95c:	1b c0       	rjmp	.+54     	; 0x994 <Dio_ActivatePortPullupResistor+0xbc>

				   break;
			   case PH_PORTC:
				   write_byte(reg_DDRC,0);
 95e:	e4 e3       	ldi	r30, 0x34	; 52
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	10 82       	st	Z, r1
	                clear_bit(reg_SFIOR,2);
 964:	a0 e5       	ldi	r26, 0x50	; 80
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	e0 e5       	ldi	r30, 0x50	; 80
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	8b 7f       	andi	r24, 0xFB	; 251
 970:	8c 93       	st	X, r24
	                write_byte(reg_PORTC,0);
 972:	e5 e3       	ldi	r30, 0x35	; 53
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	10 82       	st	Z, r1
 978:	0d c0       	rjmp	.+26     	; 0x994 <Dio_ActivatePortPullupResistor+0xbc>
				   break;
			   case PH_PORTD:
				   write_byte(reg_DDRD,0);
 97a:	e1 e3       	ldi	r30, 0x31	; 49
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	10 82       	st	Z, r1
	                clear_bit(reg_SFIOR,2);
 980:	a0 e5       	ldi	r26, 0x50	; 80
 982:	b0 e0       	ldi	r27, 0x00	; 0
 984:	e0 e5       	ldi	r30, 0x50	; 80
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	80 81       	ld	r24, Z
 98a:	8b 7f       	andi	r24, 0xFB	; 251
 98c:	8c 93       	st	X, r24
	                write_byte(reg_PORTD,0);
 98e:	e2 e3       	ldi	r30, 0x32	; 50
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	10 82       	st	Z, r1

				   break;
			    }

	}
 994:	0f 90       	pop	r0
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	cf 91       	pop	r28
 99c:	df 91       	pop	r29
 99e:	08 95       	ret

000009a0 <Dio_TogglePin>:

void Dio_TogglePin(u8 PH_PortID,u8 PH_PinID)
{
 9a0:	df 93       	push	r29
 9a2:	cf 93       	push	r28
 9a4:	00 d0       	rcall	.+0      	; 0x9a6 <Dio_TogglePin+0x6>
 9a6:	00 d0       	rcall	.+0      	; 0x9a8 <Dio_TogglePin+0x8>
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
 9ac:	89 83       	std	Y+1, r24	; 0x01
 9ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(PH_PortID)
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	3c 83       	std	Y+4, r19	; 0x04
 9b8:	2b 83       	std	Y+3, r18	; 0x03
 9ba:	8b 81       	ldd	r24, Y+3	; 0x03
 9bc:	9c 81       	ldd	r25, Y+4	; 0x04
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	91 05       	cpc	r25, r1
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <Dio_TogglePin+0x26>
 9c4:	3e c0       	rjmp	.+124    	; 0xa42 <Dio_TogglePin+0xa2>
 9c6:	2b 81       	ldd	r18, Y+3	; 0x03
 9c8:	3c 81       	ldd	r19, Y+4	; 0x04
 9ca:	23 30       	cpi	r18, 0x03	; 3
 9cc:	31 05       	cpc	r19, r1
 9ce:	34 f4       	brge	.+12     	; 0x9dc <Dio_TogglePin+0x3c>
 9d0:	8b 81       	ldd	r24, Y+3	; 0x03
 9d2:	9c 81       	ldd	r25, Y+4	; 0x04
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	91 05       	cpc	r25, r1
 9d8:	71 f0       	breq	.+28     	; 0x9f6 <Dio_TogglePin+0x56>
 9da:	a4 c0       	rjmp	.+328    	; 0xb24 <Dio_TogglePin+0x184>
 9dc:	2b 81       	ldd	r18, Y+3	; 0x03
 9de:	3c 81       	ldd	r19, Y+4	; 0x04
 9e0:	23 30       	cpi	r18, 0x03	; 3
 9e2:	31 05       	cpc	r19, r1
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <Dio_TogglePin+0x48>
 9e6:	53 c0       	rjmp	.+166    	; 0xa8e <Dio_TogglePin+0xee>
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	9c 81       	ldd	r25, Y+4	; 0x04
 9ec:	84 30       	cpi	r24, 0x04	; 4
 9ee:	91 05       	cpc	r25, r1
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <Dio_TogglePin+0x54>
 9f2:	73 c0       	rjmp	.+230    	; 0xada <Dio_TogglePin+0x13a>
 9f4:	97 c0       	rjmp	.+302    	; 0xb24 <Dio_TogglePin+0x184>
			    {
			   case PH_PORTA:
				    set_bit(reg_DDRA,PH_PinID);
 9f6:	aa e3       	ldi	r26, 0x3A	; 58
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	ea e3       	ldi	r30, 0x3A	; 58
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	48 2f       	mov	r20, r24
 a02:	8a 81       	ldd	r24, Y+2	; 0x02
 a04:	28 2f       	mov	r18, r24
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <Dio_TogglePin+0x72>
 a0e:	88 0f       	add	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	2a 95       	dec	r18
 a14:	e2 f7       	brpl	.-8      	; 0xa0e <Dio_TogglePin+0x6e>
 a16:	84 2b       	or	r24, r20
 a18:	8c 93       	st	X, r24
					toggle_bit(reg_PORTA,PH_PinID);
 a1a:	ab e3       	ldi	r26, 0x3B	; 59
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	eb e3       	ldi	r30, 0x3B	; 59
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	48 2f       	mov	r20, r24
 a26:	8a 81       	ldd	r24, Y+2	; 0x02
 a28:	28 2f       	mov	r18, r24
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	02 2e       	mov	r0, r18
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <Dio_TogglePin+0x98>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	0a 94       	dec	r0
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <Dio_TogglePin+0x94>
 a3c:	84 27       	eor	r24, r20
 a3e:	8c 93       	st	X, r24
 a40:	71 c0       	rjmp	.+226    	; 0xb24 <Dio_TogglePin+0x184>

			 	  break;
			   case PH_PORTB:
				    set_bit(reg_DDRB,PH_PinID);
 a42:	a7 e3       	ldi	r26, 0x37	; 55
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	e7 e3       	ldi	r30, 0x37	; 55
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	80 81       	ld	r24, Z
 a4c:	48 2f       	mov	r20, r24
 a4e:	8a 81       	ldd	r24, Y+2	; 0x02
 a50:	28 2f       	mov	r18, r24
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <Dio_TogglePin+0xbe>
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	2a 95       	dec	r18
 a60:	e2 f7       	brpl	.-8      	; 0xa5a <Dio_TogglePin+0xba>
 a62:	84 2b       	or	r24, r20
 a64:	8c 93       	st	X, r24
					toggle_bit(reg_PORTB,PH_PinID);
 a66:	a8 e3       	ldi	r26, 0x38	; 56
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	e8 e3       	ldi	r30, 0x38	; 56
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	48 2f       	mov	r20, r24
 a72:	8a 81       	ldd	r24, Y+2	; 0x02
 a74:	28 2f       	mov	r18, r24
 a76:	30 e0       	ldi	r19, 0x00	; 0
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	02 2e       	mov	r0, r18
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <Dio_TogglePin+0xe4>
 a80:	88 0f       	add	r24, r24
 a82:	99 1f       	adc	r25, r25
 a84:	0a 94       	dec	r0
 a86:	e2 f7       	brpl	.-8      	; 0xa80 <Dio_TogglePin+0xe0>
 a88:	84 27       	eor	r24, r20
 a8a:	8c 93       	st	X, r24
 a8c:	4b c0       	rjmp	.+150    	; 0xb24 <Dio_TogglePin+0x184>
				   break;
			   case PH_PORTC:
				    set_bit(reg_DDRC,PH_PinID);
 a8e:	a4 e3       	ldi	r26, 0x34	; 52
 a90:	b0 e0       	ldi	r27, 0x00	; 0
 a92:	e4 e3       	ldi	r30, 0x34	; 52
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	48 2f       	mov	r20, r24
 a9a:	8a 81       	ldd	r24, Y+2	; 0x02
 a9c:	28 2f       	mov	r18, r24
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <Dio_TogglePin+0x10a>
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	2a 95       	dec	r18
 aac:	e2 f7       	brpl	.-8      	; 0xaa6 <Dio_TogglePin+0x106>
 aae:	84 2b       	or	r24, r20
 ab0:	8c 93       	st	X, r24
					toggle_bit(reg_PORTC,PH_PinID);
 ab2:	a5 e3       	ldi	r26, 0x35	; 53
 ab4:	b0 e0       	ldi	r27, 0x00	; 0
 ab6:	e5 e3       	ldi	r30, 0x35	; 53
 ab8:	f0 e0       	ldi	r31, 0x00	; 0
 aba:	80 81       	ld	r24, Z
 abc:	48 2f       	mov	r20, r24
 abe:	8a 81       	ldd	r24, Y+2	; 0x02
 ac0:	28 2f       	mov	r18, r24
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	02 2e       	mov	r0, r18
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <Dio_TogglePin+0x130>
 acc:	88 0f       	add	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	0a 94       	dec	r0
 ad2:	e2 f7       	brpl	.-8      	; 0xacc <Dio_TogglePin+0x12c>
 ad4:	84 27       	eor	r24, r20
 ad6:	8c 93       	st	X, r24
 ad8:	25 c0       	rjmp	.+74     	; 0xb24 <Dio_TogglePin+0x184>
				   break;
			   case PH_PORTD:
				    set_bit(reg_DDRD,PH_PinID);
 ada:	a1 e3       	ldi	r26, 0x31	; 49
 adc:	b0 e0       	ldi	r27, 0x00	; 0
 ade:	e1 e3       	ldi	r30, 0x31	; 49
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	48 2f       	mov	r20, r24
 ae6:	8a 81       	ldd	r24, Y+2	; 0x02
 ae8:	28 2f       	mov	r18, r24
 aea:	30 e0       	ldi	r19, 0x00	; 0
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <Dio_TogglePin+0x156>
 af2:	88 0f       	add	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	2a 95       	dec	r18
 af8:	e2 f7       	brpl	.-8      	; 0xaf2 <Dio_TogglePin+0x152>
 afa:	84 2b       	or	r24, r20
 afc:	8c 93       	st	X, r24
					toggle_bit(reg_PORTD,PH_PinID);
 afe:	a2 e3       	ldi	r26, 0x32	; 50
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	e2 e3       	ldi	r30, 0x32	; 50
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	48 2f       	mov	r20, r24
 b0a:	8a 81       	ldd	r24, Y+2	; 0x02
 b0c:	28 2f       	mov	r18, r24
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	81 e0       	ldi	r24, 0x01	; 1
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	02 2e       	mov	r0, r18
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <Dio_TogglePin+0x17c>
 b18:	88 0f       	add	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	0a 94       	dec	r0
 b1e:	e2 f7       	brpl	.-8      	; 0xb18 <Dio_TogglePin+0x178>
 b20:	84 27       	eor	r24, r20
 b22:	8c 93       	st	X, r24

				   break;
			    }

}
 b24:	0f 90       	pop	r0
 b26:	0f 90       	pop	r0
 b28:	0f 90       	pop	r0
 b2a:	0f 90       	pop	r0
 b2c:	cf 91       	pop	r28
 b2e:	df 91       	pop	r29
 b30:	08 95       	ret

00000b32 <Dio_TogglePort>:

void Dio_TogglePort(u8 PH_PortID)
{
 b32:	df 93       	push	r29
 b34:	cf 93       	push	r28
 b36:	00 d0       	rcall	.+0      	; 0xb38 <Dio_TogglePort+0x6>
 b38:	0f 92       	push	r0
 b3a:	cd b7       	in	r28, 0x3d	; 61
 b3c:	de b7       	in	r29, 0x3e	; 62
 b3e:	89 83       	std	Y+1, r24	; 0x01
	switch(PH_PortID)
 b40:	89 81       	ldd	r24, Y+1	; 0x01
 b42:	28 2f       	mov	r18, r24
 b44:	30 e0       	ldi	r19, 0x00	; 0
 b46:	3b 83       	std	Y+3, r19	; 0x03
 b48:	2a 83       	std	Y+2, r18	; 0x02
 b4a:	8a 81       	ldd	r24, Y+2	; 0x02
 b4c:	9b 81       	ldd	r25, Y+3	; 0x03
 b4e:	82 30       	cpi	r24, 0x02	; 2
 b50:	91 05       	cpc	r25, r1
 b52:	11 f1       	breq	.+68     	; 0xb98 <Dio_TogglePort+0x66>
 b54:	2a 81       	ldd	r18, Y+2	; 0x02
 b56:	3b 81       	ldd	r19, Y+3	; 0x03
 b58:	23 30       	cpi	r18, 0x03	; 3
 b5a:	31 05       	cpc	r19, r1
 b5c:	34 f4       	brge	.+12     	; 0xb6a <Dio_TogglePort+0x38>
 b5e:	8a 81       	ldd	r24, Y+2	; 0x02
 b60:	9b 81       	ldd	r25, Y+3	; 0x03
 b62:	81 30       	cpi	r24, 0x01	; 1
 b64:	91 05       	cpc	r25, r1
 b66:	61 f0       	breq	.+24     	; 0xb80 <Dio_TogglePort+0x4e>
 b68:	3a c0       	rjmp	.+116    	; 0xbde <Dio_TogglePort+0xac>
 b6a:	2a 81       	ldd	r18, Y+2	; 0x02
 b6c:	3b 81       	ldd	r19, Y+3	; 0x03
 b6e:	23 30       	cpi	r18, 0x03	; 3
 b70:	31 05       	cpc	r19, r1
 b72:	f1 f0       	breq	.+60     	; 0xbb0 <Dio_TogglePort+0x7e>
 b74:	8a 81       	ldd	r24, Y+2	; 0x02
 b76:	9b 81       	ldd	r25, Y+3	; 0x03
 b78:	84 30       	cpi	r24, 0x04	; 4
 b7a:	91 05       	cpc	r25, r1
 b7c:	29 f1       	breq	.+74     	; 0xbc8 <Dio_TogglePort+0x96>
 b7e:	2f c0       	rjmp	.+94     	; 0xbde <Dio_TogglePort+0xac>
				    {
				   case PH_PORTA:
					   write_byte(reg_DDRA,255);
 b80:	ea e3       	ldi	r30, 0x3A	; 58
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	80 83       	st	Z, r24
						toggle_byte(reg_PORTA);
 b88:	ab e3       	ldi	r26, 0x3B	; 59
 b8a:	b0 e0       	ldi	r27, 0x00	; 0
 b8c:	eb e3       	ldi	r30, 0x3B	; 59
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	80 81       	ld	r24, Z
 b92:	80 95       	com	r24
 b94:	8c 93       	st	X, r24
 b96:	23 c0       	rjmp	.+70     	; 0xbde <Dio_TogglePort+0xac>

				 	  break;
				   case PH_PORTB:
					   write_byte(reg_DDRB,255);
 b98:	e7 e3       	ldi	r30, 0x37	; 55
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	8f ef       	ldi	r24, 0xFF	; 255
 b9e:	80 83       	st	Z, r24
						toggle_byte(reg_PORTB);
 ba0:	a8 e3       	ldi	r26, 0x38	; 56
 ba2:	b0 e0       	ldi	r27, 0x00	; 0
 ba4:	e8 e3       	ldi	r30, 0x38	; 56
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	80 95       	com	r24
 bac:	8c 93       	st	X, r24
 bae:	17 c0       	rjmp	.+46     	; 0xbde <Dio_TogglePort+0xac>
					   break;
				   case PH_PORTC:
					   write_byte(reg_DDRC,255);
 bb0:	e4 e3       	ldi	r30, 0x34	; 52
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	80 83       	st	Z, r24
						toggle_byte(reg_PORTC);
 bb8:	a5 e3       	ldi	r26, 0x35	; 53
 bba:	b0 e0       	ldi	r27, 0x00	; 0
 bbc:	e5 e3       	ldi	r30, 0x35	; 53
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	80 81       	ld	r24, Z
 bc2:	80 95       	com	r24
 bc4:	8c 93       	st	X, r24
 bc6:	0b c0       	rjmp	.+22     	; 0xbde <Dio_TogglePort+0xac>
					   break;
				   case PH_PORTD:
					   write_byte(reg_DDRD,255);
 bc8:	e1 e3       	ldi	r30, 0x31	; 49
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	80 83       	st	Z, r24
						toggle_byte(reg_PORTD);
 bd0:	a2 e3       	ldi	r26, 0x32	; 50
 bd2:	b0 e0       	ldi	r27, 0x00	; 0
 bd4:	e2 e3       	ldi	r30, 0x32	; 50
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	80 81       	ld	r24, Z
 bda:	80 95       	com	r24
 bdc:	8c 93       	st	X, r24

					   break;
				    }


}
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	0f 90       	pop	r0
 be4:	cf 91       	pop	r28
 be6:	df 91       	pop	r29
 be8:	08 95       	ret

00000bea <main>:
#include "Dio.h"

void __vector_1(void)__attribute__((signal, __INTR_ATTRS));

void main(void)
{
 bea:	df 93       	push	r29
 bec:	cf 93       	push	r28
 bee:	cd b7       	in	r28, 0x3d	; 61
 bf0:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(PH_PORTA,0,OUTPUT_DIRECTION);
 bf2:	81 e0       	ldi	r24, 0x01	; 1
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	41 e0       	ldi	r20, 0x01	; 1
 bf8:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_SetPinDirection(PH_PORTD,2,INPUT_DIRECTION);
 bfc:	84 e0       	ldi	r24, 0x04	; 4
 bfe:	62 e0       	ldi	r22, 0x02	; 2
 c00:	40 e0       	ldi	r20, 0x00	; 0
 c02:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
	Dio_ActivatePinPullupResistor(PH_PORTD,2);
 c06:	84 e0       	ldi	r24, 0x04	; 4
 c08:	62 e0       	ldi	r22, 0x02	; 2
 c0a:	0e 94 83 03 	call	0x706	; 0x706 <Dio_ActivatePinPullupResistor>

	write_byte(reg_MCUCR,2);
 c0e:	e5 e5       	ldi	r30, 0x55	; 85
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	82 e0       	ldi	r24, 0x02	; 2
 c14:	80 83       	st	Z, r24
	write_byte(reg_SREG,128);
 c16:	ef e5       	ldi	r30, 0x5F	; 95
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	80 e8       	ldi	r24, 0x80	; 128
 c1c:	80 83       	st	Z, r24
	write_byte(reg_GICR,64);
 c1e:	eb e5       	ldi	r30, 0x5B	; 91
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	80 e4       	ldi	r24, 0x40	; 64
 c24:	80 83       	st	Z, r24
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <main+0x3c>

00000c28 <__vector_1>:
	}


}
void __vector_1(void)
{
 c28:	1f 92       	push	r1
 c2a:	0f 92       	push	r0
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	0f 92       	push	r0
 c30:	11 24       	eor	r1, r1
 c32:	2f 93       	push	r18
 c34:	3f 93       	push	r19
 c36:	4f 93       	push	r20
 c38:	5f 93       	push	r21
 c3a:	6f 93       	push	r22
 c3c:	7f 93       	push	r23
 c3e:	8f 93       	push	r24
 c40:	9f 93       	push	r25
 c42:	af 93       	push	r26
 c44:	bf 93       	push	r27
 c46:	ef 93       	push	r30
 c48:	ff 93       	push	r31
 c4a:	df 93       	push	r29
 c4c:	cf 93       	push	r28
 c4e:	cd b7       	in	r28, 0x3d	; 61
 c50:	de b7       	in	r29, 0x3e	; 62

	Dio_TogglePin(PH_PORTA,0);
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	60 e0       	ldi	r22, 0x00	; 0
 c56:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Dio_TogglePin>



	}
 c5a:	cf 91       	pop	r28
 c5c:	df 91       	pop	r29
 c5e:	ff 91       	pop	r31
 c60:	ef 91       	pop	r30
 c62:	bf 91       	pop	r27
 c64:	af 91       	pop	r26
 c66:	9f 91       	pop	r25
 c68:	8f 91       	pop	r24
 c6a:	7f 91       	pop	r23
 c6c:	6f 91       	pop	r22
 c6e:	5f 91       	pop	r21
 c70:	4f 91       	pop	r20
 c72:	3f 91       	pop	r19
 c74:	2f 91       	pop	r18
 c76:	0f 90       	pop	r0
 c78:	0f be       	out	0x3f, r0	; 63
 c7a:	0f 90       	pop	r0
 c7c:	1f 90       	pop	r1
 c7e:	18 95       	reti

00000c80 <_exit>:
 c80:	f8 94       	cli

00000c82 <__stop_program>:
 c82:	ff cf       	rjmp	.-2      	; 0xc82 <__stop_program>
