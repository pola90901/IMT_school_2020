
SERVO_POT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000026c4  00002758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800168  00800168  00002860  2**0
                  ALLOC
  3 .stab         00001d7c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f90  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000058fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000908f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a268  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_1>
       8:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_2>
       c:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_10>
      2c:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ec       	ldi	r30, 0xC4	; 196
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 15 12 	call	0x242a	; 0x242a <main>
      8a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_vidInit>:
#include "ATMEGA32_REGISTERS.h"
#include "ADC.h"


void ADC_vidInit (void)   //ADC initialization and enable
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	//ADC enable
    ADCSRA_REG.Bits.u8BIT_7=1;  //ADEN
     e36:	e6 e2       	ldi	r30, 0x26	; 38
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	80 83       	st	Z, r24

   //pre-scalar configuration as 128
    ADCSRA_REG.Bits.u8BIT_0=1;  //ADPS0
     e40:	e6 e2       	ldi	r30, 0x26	; 38
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	81 60       	ori	r24, 0x01	; 1
     e48:	80 83       	st	Z, r24
    ADCSRA_REG.Bits.u8BIT_1=1;  //ADPS1
     e4a:	e6 e2       	ldi	r30, 0x26	; 38
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	80 83       	st	Z, r24
    ADCSRA_REG.Bits.u8BIT_2=1;  //ADPS2
     e54:	e6 e2       	ldi	r30, 0x26	; 38
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	84 60       	ori	r24, 0x04	; 4
     e5c:	80 83       	st	Z, r24

    //Reference voltage as AVCC with external capacitor
    ADMUX_REG.Bits.u8BIT_7=0;
     e5e:	e7 e2       	ldi	r30, 0x27	; 39
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8f 77       	andi	r24, 0x7F	; 127
     e66:	80 83       	st	Z, r24
    ADMUX_REG.Bits.u8BIT_6=1;
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 64       	ori	r24, 0x40	; 64
     e70:	80 83       	st	Z, r24

    //ADC data right adjustment
    ADMUX_REG.Bits.u8BIT_5=0;
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8f 7d       	andi	r24, 0xDF	; 223
     e7a:	80 83       	st	Z, r24


}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <ADC_u16Read>:
u16 ADC_u16Read (u8 channel)  //Read from the ADC channel
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <ADC_u16Read+0x6>
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	8b 83       	std	Y+3, r24	; 0x03
   u16 Local_Result;
   //ADC channel selection
   ADMUX_REG.u8Whole_Register &= ADC_ADMUX_CHANNEL_CLEAR_MASK; //clear the MUX bits
     e90:	a7 e2       	ldi	r26, 0x27	; 39
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e7 e2       	ldi	r30, 0x27	; 39
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 7e       	andi	r24, 0xE0	; 224
     e9c:	8c 93       	st	X, r24
   ADMUX_REG.u8Whole_Register |= channel;
     e9e:	a7 e2       	ldi	r26, 0x27	; 39
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e7 e2       	ldi	r30, 0x27	; 39
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	90 81       	ld	r25, Z
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	89 2b       	or	r24, r25
     eac:	8c 93       	st	X, r24

   //start single conversion
   ADCSRA_REG.Bits.u8BIT_6=1;   //ADSC
     eae:	e6 e2       	ldi	r30, 0x26	; 38
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	80 64       	ori	r24, 0x40	; 64
     eb6:	80 83       	st	Z, r24

   //wait for the conversion
   while(!(ADCSRA_REG.Bits.u8BIT_4));  //while(ADIF ==0)
     eb8:	e6 e2       	ldi	r30, 0x26	; 38
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 71       	andi	r24, 0x10	; 16
     ec0:	88 23       	and	r24, r24
     ec2:	d1 f3       	breq	.-12     	; 0xeb8 <ADC_u16Read+0x36>

	   Local_Result = ADCL_REG.u8Whole_Register;
     ec4:	e4 e2       	ldi	r30, 0x24	; 36
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
	   Local_Result |= (((u16)ADCH_REG.u8Whole_Register)<<8);
     ed2:	e5 e2       	ldi	r30, 0x25	; 37
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	38 2f       	mov	r19, r24
     ede:	22 27       	eor	r18, r18
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	82 2b       	or	r24, r18
     ee6:	93 2b       	or	r25, r19
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01

   return Local_Result;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02

}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <DIO_u8GetPin>:
#include "BIT_MATH.h"
#include "ATMEGA32_REGISTERS.h"
#include "DIO_int.h"

u8 DIO_u8GetPin(u8 Copy_PortX , u8  Copy_PinX )
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <DIO_u8GetPin+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <DIO_u8GetPin+0x8>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	6b 83       	std	Y+3, r22	; 0x03
	u8 var=0;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8_PIN_0) && (Copy_PinX <= DIO_u8_PIN_7)))
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	88 23       	and	r24, r24
     f14:	09 f4       	brne	.+2      	; 0xf18 <DIO_u8GetPin+0x1c>
     f16:	6f c0       	rjmp	.+222    	; 0xff6 <DIO_u8GetPin+0xfa>
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	85 30       	cpi	r24, 0x05	; 5
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <DIO_u8GetPin+0x24>
     f1e:	6b c0       	rjmp	.+214    	; 0xff6 <DIO_u8GetPin+0xfa>
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	08 f0       	brcs	.+2      	; 0xf28 <DIO_u8GetPin+0x2c>
     f26:	67 c0       	rjmp	.+206    	; 0xff6 <DIO_u8GetPin+0xfa>
		 {
		         switch(Copy_PortX)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3d 83       	std	Y+5, r19	; 0x05
     f30:	2c 83       	std	Y+4, r18	; 0x04
     f32:	4c 81       	ldd	r20, Y+4	; 0x04
     f34:	5d 81       	ldd	r21, Y+5	; 0x05
     f36:	42 30       	cpi	r20, 0x02	; 2
     f38:	51 05       	cpc	r21, r1
     f3a:	41 f1       	breq	.+80     	; 0xf8c <DIO_u8GetPin+0x90>
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	9d 81       	ldd	r25, Y+5	; 0x05
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	91 05       	cpc	r25, r1
     f44:	34 f4       	brge	.+12     	; 0xf52 <DIO_u8GetPin+0x56>
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	21 30       	cpi	r18, 0x01	; 1
     f4c:	31 05       	cpc	r19, r1
     f4e:	61 f0       	breq	.+24     	; 0xf68 <DIO_u8GetPin+0x6c>
     f50:	52 c0       	rjmp	.+164    	; 0xff6 <DIO_u8GetPin+0xfa>
     f52:	4c 81       	ldd	r20, Y+4	; 0x04
     f54:	5d 81       	ldd	r21, Y+5	; 0x05
     f56:	43 30       	cpi	r20, 0x03	; 3
     f58:	51 05       	cpc	r21, r1
     f5a:	51 f1       	breq	.+84     	; 0xfb0 <DIO_u8GetPin+0xb4>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	91 05       	cpc	r25, r1
     f64:	b9 f1       	breq	.+110    	; 0xfd4 <DIO_u8GetPin+0xd8>
     f66:	47 c0       	rjmp	.+142    	; 0xff6 <DIO_u8GetPin+0xfa>
					{
					case u8PORTA:
						var=GET_BIT(PINA_REG ,Copy_PinX);
     f68:	e9 e3       	ldi	r30, 0x39	; 57
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a9 01       	movw	r20, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8GetPin+0x84>
     f7c:	55 95       	asr	r21
     f7e:	47 95       	ror	r20
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8GetPin+0x80>
     f84:	ca 01       	movw	r24, r20
     f86:	81 70       	andi	r24, 0x01	; 1
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	35 c0       	rjmp	.+106    	; 0xff6 <DIO_u8GetPin+0xfa>
						break;
					case u8PORTB:
						var=GET_BIT(PINB_REG ,Copy_PinX);
     f8c:	e6 e3       	ldi	r30, 0x36	; 54
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a9 01       	movw	r20, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8GetPin+0xa8>
     fa0:	55 95       	asr	r21
     fa2:	47 95       	ror	r20
     fa4:	8a 95       	dec	r24
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8GetPin+0xa4>
     fa8:	ca 01       	movw	r24, r20
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	23 c0       	rjmp	.+70     	; 0xff6 <DIO_u8GetPin+0xfa>
						break;
					case u8PORTC:
						var=GET_BIT(PINC_REG ,Copy_PinX);
     fb0:	e3 e3       	ldi	r30, 0x33	; 51
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a9 01       	movw	r20, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8GetPin+0xcc>
     fc4:	55 95       	asr	r21
     fc6:	47 95       	ror	r20
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8GetPin+0xc8>
     fcc:	ca 01       	movw	r24, r20
     fce:	81 70       	andi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <DIO_u8GetPin+0xfa>
						break;
					case u8PORTD:
						var=GET_BIT(PIND_REG ,Copy_PinX);
     fd4:	e0 e3       	ldi	r30, 0x30	; 48
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8GetPin+0xf0>
     fe8:	55 95       	asr	r21
     fea:	47 95       	ror	r20
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8GetPin+0xec>
     ff0:	ca 01       	movw	r24, r20
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	89 83       	std	Y+1, r24	; 0x01
						break;
					}
		 }

	return var;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01

}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_vidSetPinVal>:
void DIO_vidSetPinVal( u8 Copy_PortX , u8 Copy_PinX , u8 copy_value)

{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	27 97       	sbiw	r28, 0x07	; 7
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02
    1020:	4b 83       	std	Y+3, r20	; 0x03

	if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8_PIN_0 ) && (Copy_PinX <= DIO_u8_PIN_7 )) \
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <DIO_vidSetPinVal+0x22>
    1028:	fb c0       	rjmp	.+502    	; 0x1220 <DIO_vidSetPinVal+0x218>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	85 30       	cpi	r24, 0x05	; 5
    102e:	08 f0       	brcs	.+2      	; 0x1032 <DIO_vidSetPinVal+0x2a>
    1030:	f7 c0       	rjmp	.+494    	; 0x1220 <DIO_vidSetPinVal+0x218>
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	08 f0       	brcs	.+2      	; 0x103a <DIO_vidSetPinVal+0x32>
    1038:	f3 c0       	rjmp	.+486    	; 0x1220 <DIO_vidSetPinVal+0x218>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	21 f0       	breq	.+8      	; 0x1048 <DIO_vidSetPinVal+0x40>
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	88 23       	and	r24, r24
    1044:	09 f0       	breq	.+2      	; 0x1048 <DIO_vidSetPinVal+0x40>
    1046:	ec c0       	rjmp	.+472    	; 0x1220 <DIO_vidSetPinVal+0x218>
			&& ((copy_value == DIO_u8HIGH) || (copy_value == DIO_u8LOW)))
	{
		if (copy_value==DIO_u8HIGH)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_vidSetPinVal+0x48>
    104e:	70 c0       	rjmp	.+224    	; 0x1130 <DIO_vidSetPinVal+0x128>
		{
			switch(Copy_PortX)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3f 83       	std	Y+7, r19	; 0x07
    1058:	2e 83       	std	Y+6, r18	; 0x06
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	91 05       	cpc	r25, r1
    1062:	51 f1       	breq	.+84     	; 0x10b8 <DIO_vidSetPinVal+0xb0>
    1064:	2e 81       	ldd	r18, Y+6	; 0x06
    1066:	3f 81       	ldd	r19, Y+7	; 0x07
    1068:	23 30       	cpi	r18, 0x03	; 3
    106a:	31 05       	cpc	r19, r1
    106c:	34 f4       	brge	.+12     	; 0x107a <DIO_vidSetPinVal+0x72>
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	61 f0       	breq	.+24     	; 0x1090 <DIO_vidSetPinVal+0x88>
    1078:	d3 c0       	rjmp	.+422    	; 0x1220 <DIO_vidSetPinVal+0x218>
    107a:	2e 81       	ldd	r18, Y+6	; 0x06
    107c:	3f 81       	ldd	r19, Y+7	; 0x07
    107e:	23 30       	cpi	r18, 0x03	; 3
    1080:	31 05       	cpc	r19, r1
    1082:	71 f1       	breq	.+92     	; 0x10e0 <DIO_vidSetPinVal+0xd8>
    1084:	8e 81       	ldd	r24, Y+6	; 0x06
    1086:	9f 81       	ldd	r25, Y+7	; 0x07
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	91 05       	cpc	r25, r1
    108c:	e9 f1       	breq	.+122    	; 0x1108 <DIO_vidSetPinVal+0x100>
    108e:	c8 c0       	rjmp	.+400    	; 0x1220 <DIO_vidSetPinVal+0x218>
			{
			case u8PORTA:
				SET_BIT(PORTA_REG,Copy_PinX);
    1090:	ab e3       	ldi	r26, 0x3B	; 59
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e3       	ldi	r30, 0x3B	; 59
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_vidSetPinVal+0xa6>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_vidSetPinVal+0xa2>
    10b2:	84 2b       	or	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	b4 c0       	rjmp	.+360    	; 0x1220 <DIO_vidSetPinVal+0x218>
				break;
			case u8PORTB:
				SET_BIT(PORTB_REG,Copy_PinX);
    10b8:	a8 e3       	ldi	r26, 0x38	; 56
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e8 e3       	ldi	r30, 0x38	; 56
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_vidSetPinVal+0xce>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_vidSetPinVal+0xca>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	a0 c0       	rjmp	.+320    	; 0x1220 <DIO_vidSetPinVal+0x218>
				break;
			case u8PORTC:
				SET_BIT(PORTC_REG,Copy_PinX);
    10e0:	a5 e3       	ldi	r26, 0x35	; 53
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_vidSetPinVal+0xf6>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_vidSetPinVal+0xf2>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	8c c0       	rjmp	.+280    	; 0x1220 <DIO_vidSetPinVal+0x218>
				break;
			case u8PORTD:
				SET_BIT(PORTD_REG,Copy_PinX);
    1108:	a2 e3       	ldi	r26, 0x32	; 50
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e2 e3       	ldi	r30, 0x32	; 50
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_vidSetPinVal+0x11e>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_vidSetPinVal+0x11a>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	78 c0       	rjmp	.+240    	; 0x1220 <DIO_vidSetPinVal+0x218>
				break;

			}
		}
			else if(copy_value == DIO_u8LOW)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 23       	and	r24, r24
    1134:	09 f0       	breq	.+2      	; 0x1138 <DIO_vidSetPinVal+0x130>
    1136:	74 c0       	rjmp	.+232    	; 0x1220 <DIO_vidSetPinVal+0x218>
			{

				switch(Copy_PortX)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3d 83       	std	Y+5, r19	; 0x05
    1140:	2c 83       	std	Y+4, r18	; 0x04
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	91 05       	cpc	r25, r1
    114a:	61 f1       	breq	.+88     	; 0x11a4 <DIO_vidSetPinVal+0x19c>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	23 30       	cpi	r18, 0x03	; 3
    1152:	31 05       	cpc	r19, r1
    1154:	34 f4       	brge	.+12     	; 0x1162 <DIO_vidSetPinVal+0x15a>
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	69 f0       	breq	.+26     	; 0x117a <DIO_vidSetPinVal+0x172>
    1160:	5f c0       	rjmp	.+190    	; 0x1220 <DIO_vidSetPinVal+0x218>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	23 30       	cpi	r18, 0x03	; 3
    1168:	31 05       	cpc	r19, r1
    116a:	89 f1       	breq	.+98     	; 0x11ce <DIO_vidSetPinVal+0x1c6>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_vidSetPinVal+0x170>
    1176:	40 c0       	rjmp	.+128    	; 0x11f8 <DIO_vidSetPinVal+0x1f0>
    1178:	53 c0       	rjmp	.+166    	; 0x1220 <DIO_vidSetPinVal+0x218>
				{
				case u8PORTA:
					CLR_BIT(PORTA_REG,Copy_PinX);
    117a:	ab e3       	ldi	r26, 0x3B	; 59
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_vidSetPinVal+0x190>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_vidSetPinVal+0x18c>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	3e c0       	rjmp	.+124    	; 0x1220 <DIO_vidSetPinVal+0x218>
					break;
				case u8PORTB:
					CLR_BIT(PORTB_REG,Copy_PinX);
    11a4:	a8 e3       	ldi	r26, 0x38	; 56
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e8 e3       	ldi	r30, 0x38	; 56
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_vidSetPinVal+0x1ba>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_vidSetPinVal+0x1b6>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	29 c0       	rjmp	.+82     	; 0x1220 <DIO_vidSetPinVal+0x218>
					break;
				case u8PORTC:
					CLR_BIT(PORTC_REG,Copy_PinX);
    11ce:	a5 e3       	ldi	r26, 0x35	; 53
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e3       	ldi	r30, 0x35	; 53
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_vidSetPinVal+0x1e4>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_vidSetPinVal+0x1e0>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <DIO_vidSetPinVal+0x218>
					break;
				case u8PORTD:
					CLR_BIT(PORTD_REG,Copy_PinX);
    11f8:	a2 e3       	ldi	r26, 0x32	; 50
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e2 e3       	ldi	r30, 0x32	; 50
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_vidSetPinVal+0x20e>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_vidSetPinVal+0x20a>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24

			}

		}

}
    1220:	27 96       	adiw	r28, 0x07	; 7
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_vidSetPinDirection>:
void DIO_vidSetPinDirection(u8 Copy_PortX,u8 Copy_PinX, u8 Copy_Direction)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	27 97       	sbiw	r28, 0x07	; 7
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	6a 83       	std	Y+2, r22	; 0x02
    124a:	4b 83       	std	Y+3, r20	; 0x03
	if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8_PIN_0) && (Copy_PinX <= DIO_u8_PIN_7)) \
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 23       	and	r24, r24
    1250:	09 f4       	brne	.+2      	; 0x1254 <DIO_vidSetPinDirection+0x22>
    1252:	fb c0       	rjmp	.+502    	; 0x144a <DIO_vidSetPinDirection+0x218>
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	85 30       	cpi	r24, 0x05	; 5
    1258:	08 f0       	brcs	.+2      	; 0x125c <DIO_vidSetPinDirection+0x2a>
    125a:	f7 c0       	rjmp	.+494    	; 0x144a <DIO_vidSetPinDirection+0x218>
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	08 f0       	brcs	.+2      	; 0x1264 <DIO_vidSetPinDirection+0x32>
    1262:	f3 c0       	rjmp	.+486    	; 0x144a <DIO_vidSetPinDirection+0x218>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 23       	and	r24, r24
    1268:	21 f0       	breq	.+8      	; 0x1272 <DIO_vidSetPinDirection+0x40>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	09 f0       	breq	.+2      	; 0x1272 <DIO_vidSetPinDirection+0x40>
    1270:	ec c0       	rjmp	.+472    	; 0x144a <DIO_vidSetPinDirection+0x218>
			&& ((Copy_Direction == DIO_u8INPUT) || (Copy_Direction == DIO_u8OUTPUT)))
	{
		if(Copy_Direction == DIO_u8INPUT)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	88 23       	and	r24, r24
    1276:	09 f0       	breq	.+2      	; 0x127a <DIO_vidSetPinDirection+0x48>
    1278:	75 c0       	rjmp	.+234    	; 0x1364 <DIO_vidSetPinDirection+0x132>
		{
			switch(Copy_PortX)
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3f 83       	std	Y+7, r19	; 0x07
    1282:	2e 83       	std	Y+6, r18	; 0x06
    1284:	8e 81       	ldd	r24, Y+6	; 0x06
    1286:	9f 81       	ldd	r25, Y+7	; 0x07
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	91 05       	cpc	r25, r1
    128c:	61 f1       	breq	.+88     	; 0x12e6 <DIO_vidSetPinDirection+0xb4>
    128e:	2e 81       	ldd	r18, Y+6	; 0x06
    1290:	3f 81       	ldd	r19, Y+7	; 0x07
    1292:	23 30       	cpi	r18, 0x03	; 3
    1294:	31 05       	cpc	r19, r1
    1296:	34 f4       	brge	.+12     	; 0x12a4 <DIO_vidSetPinDirection+0x72>
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	69 f0       	breq	.+26     	; 0x12bc <DIO_vidSetPinDirection+0x8a>
    12a2:	d3 c0       	rjmp	.+422    	; 0x144a <DIO_vidSetPinDirection+0x218>
    12a4:	2e 81       	ldd	r18, Y+6	; 0x06
    12a6:	3f 81       	ldd	r19, Y+7	; 0x07
    12a8:	23 30       	cpi	r18, 0x03	; 3
    12aa:	31 05       	cpc	r19, r1
    12ac:	89 f1       	breq	.+98     	; 0x1310 <DIO_vidSetPinDirection+0xde>
    12ae:	8e 81       	ldd	r24, Y+6	; 0x06
    12b0:	9f 81       	ldd	r25, Y+7	; 0x07
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <DIO_vidSetPinDirection+0x88>
    12b8:	40 c0       	rjmp	.+128    	; 0x133a <DIO_vidSetPinDirection+0x108>
    12ba:	c7 c0       	rjmp	.+398    	; 0x144a <DIO_vidSetPinDirection+0x218>
			{
			case u8PORTA:
				CLR_BIT(DDRA_REG,Copy_PinX);
    12bc:	aa e3       	ldi	r26, 0x3A	; 58
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_vidSetPinDirection+0xa8>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_vidSetPinDirection+0xa4>
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	b2 c0       	rjmp	.+356    	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;

			case u8PORTB:
				CLR_BIT(DDRB_REG,Copy_PinX);
    12e6:	a7 e3       	ldi	r26, 0x37	; 55
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e7 e3       	ldi	r30, 0x37	; 55
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_vidSetPinDirection+0xd2>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_vidSetPinDirection+0xce>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	9d c0       	rjmp	.+314    	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;

			case u8PORTC:
				CLR_BIT(DDRC_REG,Copy_PinX);
    1310:	a4 e3       	ldi	r26, 0x34	; 52
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e4 e3       	ldi	r30, 0x34	; 52
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_vidSetPinDirection+0xfc>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_vidSetPinDirection+0xf8>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	88 c0       	rjmp	.+272    	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;

			case u8PORTD:
				CLR_BIT(DDRD_REG,Copy_PinX);
    133a:	a1 e3       	ldi	r26, 0x31	; 49
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e1 e3       	ldi	r30, 0x31	; 49
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_vidSetPinDirection+0x126>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_vidSetPinDirection+0x122>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	73 c0       	rjmp	.+230    	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;
			}
		}
		else if(Copy_Direction == DIO_u8OUTPUT)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	09 f0       	breq	.+2      	; 0x136c <DIO_vidSetPinDirection+0x13a>
    136a:	6f c0       	rjmp	.+222    	; 0x144a <DIO_vidSetPinDirection+0x218>
		{
			switch(Copy_PortX)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3d 83       	std	Y+5, r19	; 0x05
    1374:	2c 83       	std	Y+4, r18	; 0x04
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	51 f1       	breq	.+84     	; 0x13d4 <DIO_vidSetPinDirection+0x1a2>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	23 30       	cpi	r18, 0x03	; 3
    1386:	31 05       	cpc	r19, r1
    1388:	34 f4       	brge	.+12     	; 0x1396 <DIO_vidSetPinDirection+0x164>
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	61 f0       	breq	.+24     	; 0x13ac <DIO_vidSetPinDirection+0x17a>
    1394:	5a c0       	rjmp	.+180    	; 0x144a <DIO_vidSetPinDirection+0x218>
    1396:	2c 81       	ldd	r18, Y+4	; 0x04
    1398:	3d 81       	ldd	r19, Y+5	; 0x05
    139a:	23 30       	cpi	r18, 0x03	; 3
    139c:	31 05       	cpc	r19, r1
    139e:	71 f1       	breq	.+92     	; 0x13fc <DIO_vidSetPinDirection+0x1ca>
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	91 05       	cpc	r25, r1
    13a8:	e9 f1       	breq	.+122    	; 0x1424 <DIO_vidSetPinDirection+0x1f2>
    13aa:	4f c0       	rjmp	.+158    	; 0x144a <DIO_vidSetPinDirection+0x218>
			{
			case u8PORTA:
				SET_BIT(DDRA_REG,Copy_PinX);
    13ac:	aa e3       	ldi	r26, 0x3A	; 58
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ea e3       	ldi	r30, 0x3A	; 58
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_vidSetPinDirection+0x198>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_vidSetPinDirection+0x194>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	3b c0       	rjmp	.+118    	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;
			case u8PORTB:
				SET_BIT(DDRB_REG,Copy_PinX);
    13d4:	a7 e3       	ldi	r26, 0x37	; 55
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e7 e3       	ldi	r30, 0x37	; 55
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_vidSetPinDirection+0x1c0>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_vidSetPinDirection+0x1bc>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	27 c0       	rjmp	.+78     	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;
			case u8PORTC:
				SET_BIT(DDRC_REG,Copy_PinX);
    13fc:	a4 e3       	ldi	r26, 0x34	; 52
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_vidSetPinDirection+0x1e8>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_vidSetPinDirection+0x1e4>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	13 c0       	rjmp	.+38     	; 0x144a <DIO_vidSetPinDirection+0x218>
				break;
			case u8PORTD:
				SET_BIT(DDRD_REG,Copy_PinX);
    1424:	a1 e3       	ldi	r26, 0x31	; 49
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e1 e3       	ldi	r30, 0x31	; 49
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_vidSetPinDirection+0x210>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_vidSetPinDirection+0x20c>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
			}
		}

	}

}
    144a:	27 96       	adiw	r28, 0x07	; 7
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_vidSetPortDirection>:
void DIO_vidSetPortDirection(u8 Copy_Portx, u8 Copy_Direction)
 {
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_vidSetPortDirection+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_vidSetPortDirection+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6a 83       	std	Y+2, r22	; 0x02
	 if(((Copy_Portx >= u8PORTA) && (Copy_Portx <= u8PORTD)))
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	88 23       	and	r24, r24
    1470:	b1 f1       	breq	.+108    	; 0x14de <DIO_vidSetPortDirection+0x82>
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	85 30       	cpi	r24, 0x05	; 5
    1476:	98 f5       	brcc	.+102    	; 0x14de <DIO_vidSetPortDirection+0x82>
	 {
		  switch(Copy_Portx)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	3c 83       	std	Y+4, r19	; 0x04
    1480:	2b 83       	std	Y+3, r18	; 0x03
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	91 05       	cpc	r25, r1
    148a:	d9 f0       	breq	.+54     	; 0x14c2 <DIO_vidSetPortDirection+0x66>
    148c:	2b 81       	ldd	r18, Y+3	; 0x03
    148e:	3c 81       	ldd	r19, Y+4	; 0x04
    1490:	23 30       	cpi	r18, 0x03	; 3
    1492:	31 05       	cpc	r19, r1
    1494:	34 f4       	brge	.+12     	; 0x14a2 <DIO_vidSetPortDirection+0x46>
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	61 f0       	breq	.+24     	; 0x14b8 <DIO_vidSetPortDirection+0x5c>
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <DIO_vidSetPortDirection+0x82>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	23 30       	cpi	r18, 0x03	; 3
    14a8:	31 05       	cpc	r19, r1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <DIO_vidSetPortDirection+0x70>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	91 05       	cpc	r25, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <DIO_vidSetPortDirection+0x7a>
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <DIO_vidSetPortDirection+0x82>
		  {
		  case u8PORTA:
			  DDRA_REG = Copy_Direction;
    14b8:	ea e3       	ldi	r30, 0x3A	; 58
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	0e c0       	rjmp	.+28     	; 0x14de <DIO_vidSetPortDirection+0x82>
			  break;
		  case u8PORTB:
			  DDRB_REG = Copy_Direction;
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <DIO_vidSetPortDirection+0x82>
			  break;
		  case u8PORTC:
			  DDRC_REG = Copy_Direction;
    14cc:	e4 e3       	ldi	r30, 0x34	; 52
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <DIO_vidSetPortDirection+0x82>
			  break;
		  case u8PORTD:
			  DDRD_REG = Copy_Direction;
    14d6:	e1 e3       	ldi	r30, 0x31	; 49
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
			  break;
		  }
	 }
 }
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <DIO_vidSetPortVal>:
void DIO_vidSetPortVal( u8 Copy_Portx, u8 Copy_Value)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_vidSetPortVal+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_vidSetPortVal+0x8>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
	 if((Copy_Portx>= u8PORTA) && (Copy_Portx <= u8PORTD))
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 23       	and	r24, r24
    1500:	b1 f1       	breq	.+108    	; 0x156e <DIO_vidSetPortVal+0x82>
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	85 30       	cpi	r24, 0x05	; 5
    1506:	98 f5       	brcc	.+102    	; 0x156e <DIO_vidSetPortVal+0x82>
	 {

		 switch(Copy_Portx)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3c 83       	std	Y+4, r19	; 0x04
    1510:	2b 83       	std	Y+3, r18	; 0x03
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	d9 f0       	breq	.+54     	; 0x1552 <DIO_vidSetPortVal+0x66>
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	23 30       	cpi	r18, 0x03	; 3
    1522:	31 05       	cpc	r19, r1
    1524:	34 f4       	brge	.+12     	; 0x1532 <DIO_vidSetPortVal+0x46>
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	61 f0       	breq	.+24     	; 0x1548 <DIO_vidSetPortVal+0x5c>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <DIO_vidSetPortVal+0x82>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <DIO_vidSetPortVal+0x70>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	84 30       	cpi	r24, 0x04	; 4
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <DIO_vidSetPortVal+0x7a>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <DIO_vidSetPortVal+0x82>
				  {
				  case u8PORTA:
					  PORTA_REG = Copy_Value;
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	0e c0       	rjmp	.+28     	; 0x156e <DIO_vidSetPortVal+0x82>
					  break;

				  case u8PORTB:
					  PORTB_REG = Copy_Value;
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
    155a:	09 c0       	rjmp	.+18     	; 0x156e <DIO_vidSetPortVal+0x82>
					  break;

				  case u8PORTC:
					  PORTC_REG = Copy_Value;
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 83       	st	Z, r24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <DIO_vidSetPortVal+0x82>
					  break;

				  case u8PORTD:
					  PORTD_REG = Copy_Value;
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 83       	st	Z, r24
				  }

	 }


}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <DIO_vidTogglePinVal>:
void DIO_vidTogglePinVal( u8 Copy_PortX, u8 Copy_PinX)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_vidTogglePinVal+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_vidTogglePinVal+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	6a 83       	std	Y+2, r22	; 0x02


	if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8_PIN_0) && (Copy_PinX <= DIO_u8_PIN_7)))
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	88 23       	and	r24, r24
    1590:	09 f4       	brne	.+2      	; 0x1594 <DIO_vidTogglePinVal+0x18>
    1592:	77 c0       	rjmp	.+238    	; 0x1682 <DIO_vidTogglePinVal+0x106>
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	85 30       	cpi	r24, 0x05	; 5
    1598:	08 f0       	brcs	.+2      	; 0x159c <DIO_vidTogglePinVal+0x20>
    159a:	73 c0       	rjmp	.+230    	; 0x1682 <DIO_vidTogglePinVal+0x106>
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <DIO_vidTogglePinVal+0x28>
    15a2:	6f c0       	rjmp	.+222    	; 0x1682 <DIO_vidTogglePinVal+0x106>
			 {
			         switch(Copy_PortX)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	91 05       	cpc	r25, r1
    15b6:	51 f1       	breq	.+84     	; 0x160c <DIO_vidTogglePinVal+0x90>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	23 30       	cpi	r18, 0x03	; 3
    15be:	31 05       	cpc	r19, r1
    15c0:	34 f4       	brge	.+12     	; 0x15ce <DIO_vidTogglePinVal+0x52>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <DIO_vidTogglePinVal+0x68>
    15cc:	5a c0       	rjmp	.+180    	; 0x1682 <DIO_vidTogglePinVal+0x106>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	23 30       	cpi	r18, 0x03	; 3
    15d4:	31 05       	cpc	r19, r1
    15d6:	71 f1       	breq	.+92     	; 0x1634 <DIO_vidTogglePinVal+0xb8>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	91 05       	cpc	r25, r1
    15e0:	e9 f1       	breq	.+122    	; 0x165c <DIO_vidTogglePinVal+0xe0>
    15e2:	4f c0       	rjmp	.+158    	; 0x1682 <DIO_vidTogglePinVal+0x106>
						{
						case u8PORTA:
							TGL_BIT( PORTA_REG ,Copy_PinX);
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_vidTogglePinVal+0x86>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_vidTogglePinVal+0x82>
    1606:	84 27       	eor	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	3b c0       	rjmp	.+118    	; 0x1682 <DIO_vidTogglePinVal+0x106>
							break;
						case u8PORTB:
							TGL_BIT( PORTB_REG ,Copy_PinX);
    160c:	a8 e3       	ldi	r26, 0x38	; 56
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e3       	ldi	r30, 0x38	; 56
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_vidTogglePinVal+0xae>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_vidTogglePinVal+0xaa>
    162e:	84 27       	eor	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	27 c0       	rjmp	.+78     	; 0x1682 <DIO_vidTogglePinVal+0x106>
							break;
						case u8PORTC:
							TGL_BIT( PORTC_REG ,Copy_PinX);
    1634:	a5 e3       	ldi	r26, 0x35	; 53
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_vidTogglePinVal+0xd6>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_vidTogglePinVal+0xd2>
    1656:	84 27       	eor	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <DIO_vidTogglePinVal+0x106>
							break;
						case u8PORTD:
							TGL_BIT( PORTD_REG ,Copy_PinX);
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_vidTogglePinVal+0xfe>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_vidTogglePinVal+0xfa>
    167e:	84 27       	eor	r24, r20
    1680:	8c 93       	st	X, r24
						}
			 }



}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <EXTI_vidEnable_Interrupt>:


pFunc InternalCBF[3];

void EXTI_vidEnable_Interrupt ( u8 Copy_IntNumb)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <EXTI_vidEnable_Interrupt+0x6>
    1696:	0f 92       	push	r0
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
   switch (Copy_IntNumb)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3b 83       	std	Y+3, r19	; 0x03
    16a6:	2a 83       	std	Y+2, r18	; 0x02
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <EXTI_vidEnable_Interrupt+0x40>
    16b2:	2a 81       	ldd	r18, Y+2	; 0x02
    16b4:	3b 81       	ldd	r19, Y+3	; 0x03
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <EXTI_vidEnable_Interrupt+0x4c>
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	9b 81       	ldd	r25, Y+3	; 0x03
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	89 f4       	brne	.+34     	; 0x16e6 <EXTI_vidEnable_Interrupt+0x56>
   {
     case 0:
	   GICR_REG.Bits.u8BIT_6=1;     //set the PIE of INT0 to 1
    16c4:	eb e5       	ldi	r30, 0x5B	; 91
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 64       	ori	r24, 0x40	; 64
    16cc:	80 83       	st	Z, r24
    16ce:	0b c0       	rjmp	.+22     	; 0x16e6 <EXTI_vidEnable_Interrupt+0x56>
	   break;
   case 1:
	   GICR_REG.Bits.u8BIT_7=1;     //set the PIE of INT1 to 1
    16d0:	eb e5       	ldi	r30, 0x5B	; 91
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	80 68       	ori	r24, 0x80	; 128
    16d8:	80 83       	st	Z, r24
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <EXTI_vidEnable_Interrupt+0x56>
	   break;
   case 2:
	   GICR_REG.Bits.u8BIT_5=1;     //set the PIE of INT2 to 1
    16dc:	eb e5       	ldi	r30, 0x5B	; 91
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 62       	ori	r24, 0x20	; 32
    16e4:	80 83       	st	Z, r24
   default:
	   break;

   }

}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <EXTI_vidDisable_Interrupt>:
void EXTI_vidDisable_Interrupt ( u8 Copy_IntNumb)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <EXTI_vidDisable_Interrupt+0x6>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	89 83       	std	Y+1, r24	; 0x01
	 switch (Copy_IntNumb)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3b 83       	std	Y+3, r19	; 0x03
    1708:	2a 83       	std	Y+2, r18	; 0x02
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	79 f0       	breq	.+30     	; 0x1732 <EXTI_vidDisable_Interrupt+0x40>
    1714:	2a 81       	ldd	r18, Y+2	; 0x02
    1716:	3b 81       	ldd	r19, Y+3	; 0x03
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	81 f0       	breq	.+32     	; 0x173e <EXTI_vidDisable_Interrupt+0x4c>
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	89 f4       	brne	.+34     	; 0x1748 <EXTI_vidDisable_Interrupt+0x56>
	   {
	    case 0:
		   GICR_REG.Bits.u8BIT_6=0;     //set the PIE of INT0 to 0
    1726:	eb e5       	ldi	r30, 0x5B	; 91
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8f 7b       	andi	r24, 0xBF	; 191
    172e:	80 83       	st	Z, r24
    1730:	0b c0       	rjmp	.+22     	; 0x1748 <EXTI_vidDisable_Interrupt+0x56>
		   break;
	   case 1:
		   GICR_REG.Bits.u8BIT_7=0;     //set the PIE of INT1 to 0
    1732:	eb e5       	ldi	r30, 0x5B	; 91
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 77       	andi	r24, 0x7F	; 127
    173a:	80 83       	st	Z, r24
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <EXTI_vidDisable_Interrupt+0x56>
		   break;
	   case 2:
		   GICR_REG.Bits.u8BIT_5=0;     //set the PIE of INT2 to 0
    173e:	eb e5       	ldi	r30, 0x5B	; 91
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8f 7d       	andi	r24, 0xDF	; 223
    1746:	80 83       	st	Z, r24
	   default:
		   break;

	   }

}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <EXTI_vidInit>:
void EXTI_vidInit(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	MCUCR_REG.u8Whole_Register &= INT0_SC_CLEAR_MASK;
    175c:	a5 e5       	ldi	r26, 0x55	; 85
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e5       	ldi	r30, 0x55	; 85
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8c 7f       	andi	r24, 0xFC	; 252
    1768:	8c 93       	st	X, r24
	MCUCR_REG.u8Whole_Register &= INT1_SC_CLEAR_MASK;
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	83 7f       	andi	r24, 0xF3	; 243
    1776:	8c 93       	st	X, r24

	MCUCR_REG.u8Whole_Register |= INT1_SC_MODE;
    1778:	a5 e5       	ldi	r26, 0x55	; 85
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e5       	ldi	r30, 0x55	; 85
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8c 93       	st	X, r24
	MCUCR_REG.u8Whole_Register |= INT0_SC_MODE;
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	8c 93       	st	X, r24

}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <EXTI_vidSetCallBackFunction>:
void EXTI_vidSetCallBackFunction(pFunc CBF, u8 Copy_IntNumb )
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <EXTI_vidSetCallBackFunction+0x6>
    179e:	0f 92       	push	r0
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	6b 83       	std	Y+3, r22	; 0x03
  if( CBF )
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	61 f0       	breq	.+24     	; 0x17ca <EXTI_vidSetCallBackFunction+0x32>
	  InternalCBF[Copy_IntNumb ]= CBF;
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	fc 01       	movw	r30, r24
    17be:	e8 59       	subi	r30, 0x98	; 152
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24

}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <__vector_1>:

ISR (INT0_vect)
{
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	2f 93       	push	r18
    17e2:	3f 93       	push	r19
    17e4:	4f 93       	push	r20
    17e6:	5f 93       	push	r21
    17e8:	6f 93       	push	r22
    17ea:	7f 93       	push	r23
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	af 93       	push	r26
    17f2:	bf 93       	push	r27
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62

	if(InternalCBF[0])
    1800:	80 91 68 01 	lds	r24, 0x0168
    1804:	90 91 69 01 	lds	r25, 0x0169
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	29 f0       	breq	.+10     	; 0x1816 <__vector_1+0x40>
	{

      InternalCBF[0]( );
    180c:	e0 91 68 01 	lds	r30, 0x0168
    1810:	f0 91 69 01 	lds	r31, 0x0169
    1814:	09 95       	icall
	}

}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_2>:

ISR (INT1_vect)
{
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62

	if(InternalCBF[1])
    1866:	80 91 6a 01 	lds	r24, 0x016A
    186a:	90 91 6b 01 	lds	r25, 0x016B
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	29 f0       	breq	.+10     	; 0x187c <__vector_2+0x40>
	{

      InternalCBF[1]( );
    1872:	e0 91 6a 01 	lds	r30, 0x016A
    1876:	f0 91 6b 01 	lds	r31, 0x016B
    187a:	09 95       	icall
	}

}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_3>:

ISR (INT2_vect)
{
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62

	if(InternalCBF[2])
    18cc:	80 91 6c 01 	lds	r24, 0x016C
    18d0:	90 91 6d 01 	lds	r25, 0x016D
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <__vector_3+0x40>
	{

      InternalCBF[2]( );
    18d8:	e0 91 6c 01 	lds	r30, 0x016C
    18dc:	f0 91 6d 01 	lds	r31, 0x016D
    18e0:	09 95       	icall
	}

}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	7f 91       	pop	r23
    18f4:	6f 91       	pop	r22
    18f6:	5f 91       	pop	r21
    18f8:	4f 91       	pop	r20
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <GPT_vidInit>:
#include "ADC.h"
#include "GPT.h"
#include "avr/interrupt.h"
pFunc Internal_CBF[2];
void GPT_vidInit( )  //initialization of timer //general purpose timer
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62

#if GPT_MODE == NORMAL  // normal=interval timer

	TCCR0_REG.Bits.u8BIT_3=0;    //set bit 3 to 0
    1910:	e3 e5       	ldi	r30, 0x53	; 83
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	87 7f       	andi	r24, 0xF7	; 247
    1918:	80 83       	st	Z, r24
	TCCR0_REG.Bits.u8BIT_6=0;  //set bit 6 to 0
    191a:	e3 e5       	ldi	r30, 0x53	; 83
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8f 7b       	andi	r24, 0xBF	; 191
    1922:	80 83       	st	Z, r24
		TCCR0_REG.u8WholeRegister |=OC0_MODE;//Oring with the mode to get its real value
		if(OCR0_VALUE<= 255)
OCR0_REG.u8WholeRegister = OCR0_VALUE;
#endif

}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <GPT_vidStopTimer>:

void GPT_vidStopTimer()  //function to stop the timer
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62

  TCCR0_REG.u8Whole_Register &= 0xF8;  //0x11111000
    1932:	a3 e5       	ldi	r26, 0x53	; 83
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e3 e5       	ldi	r30, 0x53	; 83
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	88 7f       	andi	r24, 0xF8	; 248
    193e:	8c 93       	st	X, r24



}
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <GPT_vidStartTimer>:
void GPT_vidStartTimer()   //function to start the timer
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG.u8Whole_Register &= CS_CLEAR_MASK;
    194e:	a3 e5       	ldi	r26, 0x53	; 83
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e3 e5       	ldi	r30, 0x53	; 83
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 7f       	andi	r24, 0xF8	; 248
    195a:	8c 93       	st	X, r24
	TCCR0_REG.u8Whole_Register |= CS_MODE;
    195c:	a3 e5       	ldi	r26, 0x53	; 83
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e3 e5       	ldi	r30, 0x53	; 83
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	82 60       	ori	r24, 0x02	; 2
    1968:	8c 93       	st	X, r24

}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <GPT_vidLoadTimer>:

void GPT_vidLoadTimer(u16 Copy_u8preload)       //preload value
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <GPT_vidLoadTimer+0x6>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG.u8Whole_Register= Copy_u8preload;
    197e:	e2 e5       	ldi	r30, 0x52	; 82
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	80 83       	st	Z, r24

}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <GPT_vidEnableNotification>:
void GPT_vidEnableNotification(void) //enable interrupt
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
#if GPT_MODE ==NORMAL                   //TOV0: Timer/Counter0 Overflow Flag =1
	TIMSK_REG.Bits.u8BIT_0=1;
    1998:	e9 e5       	ldi	r30, 0x59	; 89
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	80 83       	st	Z, r24
#elif GPT_MODE == CTC                   //OCF0: Output Compare Flag 0 =0
	TIMSK_REG.Bits.u8BIT_1=1;
#endif
}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <GPT_vidDisableNotification>:


void GPT_vidDisableNotification(void)  //disable interrupt
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62

#if GPT_MODE ==NORMAL                                //TOV0: Timer/Counter0 Overflow Flag =1
	TIMSK_REG.Bits.u8BIT_0=0;
    19b0:	e9 e5       	ldi	r30, 0x59	; 89
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8e 7f       	andi	r24, 0xFE	; 254
    19b8:	80 83       	st	Z, r24
#elif GPT_MODE == CTC                              //OCF0: Output Compare Flag 0 =0
	TIMSK_REG.Bits.u8BIT_1=0;
#endif
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <GPT_vidSetCallBackFunction>:

void GPT_vidSetCallBackFunction (pFunc CBF, u8 InterruptID)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <GPT_vidSetCallBackFunction+0x6>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	6b 83       	std	Y+3, r22	; 0x03
if(CBF)
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	61 f0       	breq	.+24     	; 0x19f2 <GPT_vidSetCallBackFunction+0x32>
{
	Internal_CBF[InterruptID]= CBF;
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	fc 01       	movw	r30, r24
    19e6:	e2 59       	subi	r30, 0x92	; 146
    19e8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
}


}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	2f 93       	push	r18
    1a0a:	3f 93       	push	r19
    1a0c:	4f 93       	push	r20
    1a0e:	5f 93       	push	r21
    1a10:	6f 93       	push	r22
    1a12:	7f 93       	push	r23
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	if(Internal_CBF[0])
    1a28:	80 91 6e 01 	lds	r24, 0x016E
    1a2c:	90 91 6f 01 	lds	r25, 0x016F
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	29 f0       	breq	.+10     	; 0x1a3e <__vector_11+0x40>
	{
		Internal_CBF[0]();
    1a34:	e0 91 6e 01 	lds	r30, 0x016E
    1a38:	f0 91 6f 01 	lds	r31, 0x016F
    1a3c:	09 95       	icall
	}
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	4f 93       	push	r20
    1a74:	5f 93       	push	r21
    1a76:	6f 93       	push	r22
    1a78:	7f 93       	push	r23
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	af 93       	push	r26
    1a80:	bf 93       	push	r27
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	if(Internal_CBF[1])
    1a8e:	80 91 70 01 	lds	r24, 0x0170
    1a92:	90 91 71 01 	lds	r25, 0x0171
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	29 f0       	breq	.+10     	; 0x1aa4 <__vector_10+0x40>
	{
		Internal_CBF[1]();
    1a9a:	e0 91 70 01 	lds	r30, 0x0170
    1a9e:	f0 91 71 01 	lds	r31, 0x0171
    1aa2:	09 95       	icall
	}
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	bf 91       	pop	r27
    1aae:	af 91       	pop	r26
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	7f 91       	pop	r23
    1ab6:	6f 91       	pop	r22
    1ab8:	5f 91       	pop	r21
    1aba:	4f 91       	pop	r20
    1abc:	3f 91       	pop	r19
    1abe:	2f 91       	pop	r18
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <LCD_vidSendCommand>:
//#include "DIO_Prog.c"



void LCD_vidSendCommand(u8 Copy_Command)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidSetPinVal(u8PORTA, DIO_u8_PIN_2, DIO_u8LOW); //rs
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(u8PORTA, DIO_u8_PIN_3, DIO_u8LOW);//rw
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	63 e0       	ldi	r22, 0x03	; 3
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
	DIO_vidSetPortVal(u8PORTB, Copy_Command);
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1af8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_vidSetPortVal>
	DIO_vidSetPinVal(u8PORTA, DIO_u8_PIN_4, DIO_u8HIGH);//enable
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	64 e0       	ldi	r22, 0x04	; 4
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
    1b06:	8a e0       	ldi	r24, 0x0A	; 10
    1b08:	97 ed       	ldi	r25, 0xD7	; 215
    1b0a:	a3 ec       	ldi	r26, 0xC3	; 195
    1b0c:	bf e3       	ldi	r27, 0x3F	; 63
    1b0e:	8b 87       	std	Y+11, r24	; 0x0b
    1b10:	9c 87       	std	Y+12, r25	; 0x0c
    1b12:	ad 87       	std	Y+13, r26	; 0x0d
    1b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
    1b30:	98 87       	std	Y+8, r25	; 0x08
    1b32:	a9 87       	std	Y+9, r26	; 0x09
    1b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <LCD_vidSendCommand+0xee>
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9c 83       	std	Y+4, r25	; 0x04
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_vidSendCommand+0xdc>
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <LCD_vidSendCommand+0xd0>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_vidSendCommand+0x118>
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.53);
	DIO_vidSetPinVal(u8PORTA, DIO_u8_PIN_4, DIO_u8LOW);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	64 e0       	ldi	r22, 0x04	; 4
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
}
    1bf4:	2f 96       	adiw	r28, 0x0f	; 15
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_vidWriteString>:
void LCD_vidWriteString(u8 * Copy_String)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <LCD_vidWriteString+0x6>
    1c0c:	0f 92       	push	r0
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9b 83       	std	Y+3, r25	; 0x03
    1c14:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator=0;
    1c16:	19 82       	std	Y+1, r1	; 0x01
	for( iterator=0; Copy_String[iterator] != '\0';iterator++)
    1c18:	19 82       	std	Y+1, r1	; 0x01
    1c1a:	0e c0       	rjmp	.+28     	; 0x1c38 <LCD_vidWriteString+0x32>
	{
		LCD_vidWriteData(Copy_String[iterator]);
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	9b 81       	ldd	r25, Y+3	; 0x03
    1c26:	fc 01       	movw	r30, r24
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	80 81       	ld	r24, Z
    1c2e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <LCD_vidWriteData>
	DIO_vidSetPinVal(u8PORTA, DIO_u8_PIN_4, DIO_u8LOW);
}
void LCD_vidWriteString(u8 * Copy_String)
{
	u8 iterator=0;
	for( iterator=0; Copy_String[iterator] != '\0';iterator++)
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	fc 01       	movw	r30, r24
    1c44:	e2 0f       	add	r30, r18
    1c46:	f3 1f       	adc	r31, r19
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 23       	and	r24, r24
    1c4c:	39 f7       	brne	.-50     	; 0x1c1c <LCD_vidWriteString+0x16>
	{
		LCD_vidWriteData(Copy_String[iterator]);
	}

}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <LCD_vidWriteData>:

void LCD_vidWriteData(u8 Copy_Data)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	2f 97       	sbiw	r28, 0x0f	; 15
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidSetPinVal(u8PORTA,DIO_u8_PIN_2,DIO_u8HIGH);  //RS=1 data
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(u8PORTA,DIO_u8_PIN_3,DIO_u8LOW);   //RW=0  write
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	63 e0       	ldi	r22, 0x03	; 3
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
	DIO_vidSetPortVal(u8PORTB,Copy_Data);
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c88:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_vidSetPortVal>
	DIO_vidSetPinVal(u8PORTA,DIO_u8_PIN_4,DIO_u8HIGH);      //enable is set to high (1)
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	64 e0       	ldi	r22, 0x04	; 4
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e0       	ldi	r26, 0x00	; 0
    1c9c:	b0 e4       	ldi	r27, 0x40	; 64
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_vidWriteData+0x8e>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_vidWriteData+0xee>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_vidWriteData+0xdc>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_vidWriteData+0xd0>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_vidWriteData+0x118>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(u8PORTA,DIO_u8_PIN_4,DIO_u8LOW);         //enable is set to low (0)
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	64 e0       	ldi	r22, 0x04	; 4
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
}
    1d84:	2f 96       	adiw	r28, 0x0f	; 15
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <LCD_vidInit>:
void LCD_vidInit()
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	e8 97       	sbiw	r28, 0x38	; 56
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinDirection(u8PORTA,DIO_u8_PIN_2,DIO_u8OUTPUT);
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTA,DIO_u8_PIN_3,DIO_u8OUTPUT);
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	63 e0       	ldi	r22, 0x03	; 3
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTA,DIO_u8_PIN_4,DIO_u8OUTPUT);
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	64 e0       	ldi	r22, 0x04	; 4
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_vidSetPinDirection>
	DIO_vidSetPortDirection(u8PORTB,0xFF);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	6f ef       	ldi	r22, 0xFF	; 255
    1dcc:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_vidSetPortDirection>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e2       	ldi	r26, 0x20	; 32
    1dd6:	b2 e4       	ldi	r27, 0x42	; 66
    1dd8:	8d ab       	std	Y+53, r24	; 0x35
    1dda:	9e ab       	std	Y+54, r25	; 0x36
    1ddc:	af ab       	std	Y+55, r26	; 0x37
    1dde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6d a9       	ldd	r22, Y+53	; 0x35
    1de2:	7e a9       	ldd	r23, Y+54	; 0x36
    1de4:	8f a9       	ldd	r24, Y+55	; 0x37
    1de6:	98 ad       	ldd	r25, Y+56	; 0x38
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	89 ab       	std	Y+49, r24	; 0x31
    1dfa:	9a ab       	std	Y+50, r25	; 0x32
    1dfc:	ab ab       	std	Y+51, r26	; 0x33
    1dfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e00:	69 a9       	ldd	r22, Y+49	; 0x31
    1e02:	7a a9       	ldd	r23, Y+50	; 0x32
    1e04:	8b a9       	ldd	r24, Y+51	; 0x33
    1e06:	9c a9       	ldd	r25, Y+52	; 0x34
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <LCD_vidInit+0x8c>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	98 ab       	std	Y+48, r25	; 0x30
    1e1e:	8f a7       	std	Y+47, r24	; 0x2f
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    1e22:	69 a9       	ldd	r22, Y+49	; 0x31
    1e24:	7a a9       	ldd	r23, Y+50	; 0x32
    1e26:	8b a9       	ldd	r24, Y+51	; 0x33
    1e28:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e3c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e3e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e40:	98 ad       	ldd	r25, Y+56	; 0x38
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	98 ab       	std	Y+48, r25	; 0x30
    1e60:	8f a7       	std	Y+47, r24	; 0x2f
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <LCD_vidInit+0xec>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9e a7       	std	Y+46, r25	; 0x2e
    1e6a:	8d a7       	std	Y+45, r24	; 0x2d
    1e6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_vidInit+0xda>
    1e74:	9e a7       	std	Y+46, r25	; 0x2e
    1e76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	98 ab       	std	Y+48, r25	; 0x30
    1e80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <LCD_vidInit+0xce>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e90:	8b a9       	ldd	r24, Y+51	; 0x33
    1e92:	9c a9       	ldd	r25, Y+52	; 0x34
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	98 ab       	std	Y+48, r25	; 0x30
    1e9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea4:	9c a7       	std	Y+44, r25	; 0x2c
    1ea6:	8b a7       	std	Y+43, r24	; 0x2b
    1ea8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_vidInit+0x116>
    1eb0:	9c a7       	std	Y+44, r25	; 0x2c
    1eb2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40); /* Step_1 */
	LCD_vidSendCommand(0b00111000); /* Step_2 */
    1eb4:	88 e3       	ldi	r24, 0x38	; 56
    1eb6:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_vidSendCommand>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e8       	ldi	r26, 0x80	; 128
    1ec0:	bf e3       	ldi	r27, 0x3F	; 63
    1ec2:	8f a3       	std	Y+39, r24	; 0x27
    1ec4:	98 a7       	std	Y+40, r25	; 0x28
    1ec6:	a9 a7       	std	Y+41, r26	; 0x29
    1ec8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6f a1       	ldd	r22, Y+39	; 0x27
    1ecc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ece:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a ef       	ldi	r20, 0xFA	; 250
    1ed8:	54 e4       	ldi	r21, 0x44	; 68
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	8b a3       	std	Y+35, r24	; 0x23
    1ee4:	9c a3       	std	Y+36, r25	; 0x24
    1ee6:	ad a3       	std	Y+37, r26	; 0x25
    1ee8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eea:	6b a1       	ldd	r22, Y+35	; 0x23
    1eec:	7c a1       	ldd	r23, Y+36	; 0x24
    1eee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_vidInit+0x176>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9a a3       	std	Y+34, r25	; 0x22
    1f08:	89 a3       	std	Y+33, r24	; 0x21
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    1f0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f10:	8d a1       	ldd	r24, Y+37	; 0x25
    1f12:	9e a1       	ldd	r25, Y+38	; 0x26
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6f a1       	ldd	r22, Y+39	; 0x27
    1f26:	78 a5       	ldd	r23, Y+40	; 0x28
    1f28:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9a a3       	std	Y+34, r25	; 0x22
    1f4a:	89 a3       	std	Y+33, r24	; 0x21
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_vidInit+0x1d6>
    1f4e:	88 ec       	ldi	r24, 0xC8	; 200
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	98 a3       	std	Y+32, r25	; 0x20
    1f54:	8f 8f       	std	Y+31, r24	; 0x1f
    1f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f58:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_vidInit+0x1c4>
    1f5e:	98 a3       	std	Y+32, r25	; 0x20
    1f60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9a a3       	std	Y+34, r25	; 0x22
    1f6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_vidInit+0x1b8>
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	6b a1       	ldd	r22, Y+35	; 0x23
    1f78:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9a a3       	std	Y+34, r25	; 0x22
    1f88:	89 a3       	std	Y+33, r24	; 0x21
    1f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f90:	8d 8f       	std	Y+29, r24	; 0x1d
    1f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_vidInit+0x200>
    1f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Step_3 */
	LCD_vidSendCommand(0b00001111); /* Step_4 */
    1f9e:	8f e0       	ldi	r24, 0x0F	; 15
    1fa0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_vidSendCommand>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e8       	ldi	r26, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	89 8f       	std	Y+25, r24	; 0x19
    1fae:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8d 8b       	std	Y+21, r24	; 0x15
    1fce:	9e 8b       	std	Y+22, r25	; 0x16
    1fd0:	af 8b       	std	Y+23, r26	; 0x17
    1fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_vidInit+0x260>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	69 8d       	ldd	r22, Y+25	; 0x19
    2010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_vidInit+0x2c0>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a 8b       	std	Y+18, r25	; 0x12
    203e:	89 8b       	std	Y+17, r24	; 0x11
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	9a 89       	ldd	r25, Y+18	; 0x12
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_vidInit+0x2ae>
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_vidInit+0x2a2>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 89       	ldd	r25, Y+16	; 0x10
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_vidInit+0x2ea>
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Step_5 */
	LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY); /* Step_6 */
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_vidSendCommand>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e0       	ldi	r26, 0x00	; 0
    2094:	b0 e4       	ldi	r27, 0x40	; 64
    2096:	8b 87       	std	Y+11, r24	; 0x0b
    2098:	9c 87       	std	Y+12, r25	; 0x0c
    209a:	ad 87       	std	Y+13, r26	; 0x0d
    209c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a ef       	ldi	r20, 0xFA	; 250
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8f 83       	std	Y+7, r24	; 0x07
    20b8:	98 87       	std	Y+8, r25	; 0x08
    20ba:	a9 87       	std	Y+9, r26	; 0x09
    20bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <LCD_vidInit+0x34a>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	3f c0       	rjmp	.+126    	; 0x215e <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <LCD_vidInit+0x3aa>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_vidInit+0x398>
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <LCD_vidInit+0x38c>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_vidInit+0x3d4>
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); /* Step_7 */
	LCD_vidSendCommand(0b00000110); /* Step_8 */
    2172:	86 e0       	ldi	r24, 0x06	; 6
    2174:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_vidSendCommand>
}
    2178:	e8 96       	adiw	r28, 0x38	; 56
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <LCD_vidGoTo>:

void LCD_vidGoTo(u8 Copy_Row, u8 Copy_Column)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <LCD_vidGoTo+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <LCD_vidGoTo+0x8>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	6a 83       	std	Y+2, r22	; 0x02
    if((Copy_Column >= 0) && (Copy_Column <=15))
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	80 31       	cpi	r24, 0x10	; 16
    219e:	c0 f4       	brcc	.+48     	; 0x21d0 <LCD_vidGoTo+0x46>
    {
    	switch(Copy_Row)
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	3c 83       	std	Y+4, r19	; 0x04
    21a8:	2b 83       	std	Y+3, r18	; 0x03
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	31 f0       	breq	.+12     	; 0x21be <LCD_vidGoTo+0x34>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	21 30       	cpi	r18, 0x01	; 1
    21b8:	31 05       	cpc	r19, r1
    21ba:	31 f0       	breq	.+12     	; 0x21c8 <LCD_vidGoTo+0x3e>
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <LCD_vidGoTo+0x46>
    	{
    	case 0:
    		LCD_vidSendCommand((0b10000000) + (Copy_Column));
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	80 58       	subi	r24, 0x80	; 128
    21c2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_vidSendCommand>
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <LCD_vidGoTo+0x46>
    		break;
    	case 1:
    		LCD_vidSendCommand((0b11000000) + (Copy_Column));
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	80 54       	subi	r24, 0x40	; 64
    21cc:	0e 94 65 0d 	call	0x1aca	; 0x1aca <LCD_vidSendCommand>
    	default:

    		break;
    	}
    }
}
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <PWM_vidPWMInit>:
#include "PWM_int.h"



void PWM_vidPWMInit (u8 Copy_TimerNo)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <PWM_vidPWMInit+0x6>
    21e4:	0f 92       	push	r0
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_TimerNo)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3b 83       	std	Y+3, r19	; 0x03
    21f4:	2a 83       	std	Y+2, r18	; 0x02
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	9b 81       	ldd	r25, Y+3	; 0x03
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	31 f0       	breq	.+12     	; 0x220a <PWM_vidPWMInit+0x2c>
    21fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2200:	3b 81       	ldd	r19, Y+3	; 0x03
    2202:	21 30       	cpi	r18, 0x01	; 1
    2204:	31 05       	cpc	r19, r1
    2206:	61 f0       	breq	.+24     	; 0x2220 <PWM_vidPWMInit+0x42>
    2208:	39 c0       	rjmp	.+114    	; 0x227c <PWM_vidPWMInit+0x9e>
	{

	case TIMER0:                      //until it reaches the overflow  //fast pwm
		TCCR0_REG.Bits.u8BIT_3 =1;
    220a:	e3 e5       	ldi	r30, 0x53	; 83
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	88 60       	ori	r24, 0x08	; 8
    2212:	80 83       	st	Z, r24
		TCCR0_REG.Bits.u8BIT_6 =1;
    2214:	e3 e5       	ldi	r30, 0x53	; 83
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 64       	ori	r24, 0x40	; 64
    221c:	80 83       	st	Z, r24
    221e:	2e c0       	rjmp	.+92     	; 0x227c <PWM_vidPWMInit+0x9e>
		break;
	case TIMER1:                       //until it reaches the ICR1
		TCCR1A_REG.Bits.u8BIT_7=1;   //clear OC1A on compare match
    2220:	ef e4       	ldi	r30, 0x4F	; 79
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 68       	ori	r24, 0x80	; 128
    2228:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.u8BIT_6=0;
    222a:	ef e4       	ldi	r30, 0x4F	; 79
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 7b       	andi	r24, 0xBF	; 191
    2232:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.u8BIT_5=0;  //OC1B disconnected
    2234:	ef e4       	ldi	r30, 0x4F	; 79
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8f 7d       	andi	r24, 0xDF	; 223
    223c:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.u8BIT_4=0;
    223e:	ef e4       	ldi	r30, 0x4F	; 79
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8f 7e       	andi	r24, 0xEF	; 239
    2246:	80 83       	st	Z, r24

		TCCR1A_REG.Bits.u8BIT_0=0;  //OCR1 at top //WGM
    2248:	ef e4       	ldi	r30, 0x4F	; 79
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8e 7f       	andi	r24, 0xFE	; 254
    2250:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.u8BIT_1=1;
    2252:	ef e4       	ldi	r30, 0x4F	; 79
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.u8BIT_3=1;
    225c:	ee e4       	ldi	r30, 0x4E	; 78
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	88 60       	ori	r24, 0x08	; 8
    2264:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.u8BIT_4=1;
    2266:	ee e4       	ldi	r30, 0x4E	; 78
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	80 61       	ori	r24, 0x10	; 16
    226e:	80 83       	st	Z, r24
		ICR1_REG = PWM_ICR1_VALUE;  //ICR1 value after calculations
    2270:	e6 e4       	ldi	r30, 0x46	; 70
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	84 ec       	ldi	r24, 0xC4	; 196
    2276:	99 e0       	ldi	r25, 0x09	; 9
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
	case TIMER2:
		break;

	}

}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <PWM_vidSetPWMDutyCycle>:

void PWM_vidSetPWMDutyCycle( u8 Copy_TimerNo, f32 Copy_DC) // OCR= (Duty cycle*ICR1)/100
{
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	27 97       	sbiw	r28, 0x07	; 7
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	4a 83       	std	Y+2, r20	; 0x02
    22a4:	5b 83       	std	Y+3, r21	; 0x03
    22a6:	6c 83       	std	Y+4, r22	; 0x04
    22a8:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_TimerNo)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3f 83       	std	Y+7, r19	; 0x07
    22b2:	2e 83       	std	Y+6, r18	; 0x06
    22b4:	8e 81       	ldd	r24, Y+6	; 0x06
    22b6:	9f 81       	ldd	r25, Y+7	; 0x07
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	31 f0       	breq	.+12     	; 0x22c8 <PWM_vidSetPWMDutyCycle+0x40>
    22bc:	ee 81       	ldd	r30, Y+6	; 0x06
    22be:	ff 81       	ldd	r31, Y+7	; 0x07
    22c0:	e1 30       	cpi	r30, 0x01	; 1
    22c2:	f1 05       	cpc	r31, r1
    22c4:	11 f1       	breq	.+68     	; 0x230a <PWM_vidSetPWMDutyCycle+0x82>
    22c6:	42 c0       	rjmp	.+132    	; 0x234c <PWM_vidSetPWMDutyCycle+0xc4>
	{

	case TIMER0:  //TOP is the OVF which is 256

		OCR0_REG.u8Whole_Register= (u8)(((f32)Copy_DC*((f32)256))/100);
    22c8:	0c e5       	ldi	r16, 0x5C	; 92
    22ca:	10 e0       	ldi	r17, 0x00	; 0
    22cc:	6a 81       	ldd	r22, Y+2	; 0x02
    22ce:	7b 81       	ldd	r23, Y+3	; 0x03
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	9d 81       	ldd	r25, Y+5	; 0x05
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	48 ec       	ldi	r20, 0xC8	; 200
    22ee:	52 e4       	ldi	r21, 0x42	; 66
    22f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	80 83       	st	Z, r24
    2308:	21 c0       	rjmp	.+66     	; 0x234c <PWM_vidSetPWMDutyCycle+0xc4>

			break;
	case TIMER1:  //Top is the value of ICR1
		OCR1A_REG= (u16)(((f32)Copy_DC*((f32)PWM_ICR1_VALUE))/100);
    230a:	0a e4       	ldi	r16, 0x4A	; 74
    230c:	10 e0       	ldi	r17, 0x00	; 0
    230e:	6a 81       	ldd	r22, Y+2	; 0x02
    2310:	7b 81       	ldd	r23, Y+3	; 0x03
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e4       	ldi	r19, 0x40	; 64
    231a:	4c e1       	ldi	r20, 0x1C	; 28
    231c:	55 e4       	ldi	r21, 0x45	; 69
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	48 ec       	ldi	r20, 0xC8	; 200
    2330:	52 e4       	ldi	r21, 0x42	; 66
    2332:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	f8 01       	movw	r30, r16
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
		break;
	case TIMER2:
		break;
	}

}
    234c:	27 96       	adiw	r28, 0x07	; 7
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	08 95       	ret

00002362 <PWM_StartTimer>:

void PWM_StartTimer(u8 Copy_TimerNo)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <PWM_StartTimer+0x6>
    2368:	0f 92       	push	r0
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	89 83       	std	Y+1, r24	; 0x01
	 switch(Copy_TimerNo)
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	3b 83       	std	Y+3, r19	; 0x03
    2378:	2a 83       	std	Y+2, r18	; 0x02
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	31 f0       	breq	.+12     	; 0x238e <PWM_StartTimer+0x2c>
    2382:	2a 81       	ldd	r18, Y+2	; 0x02
    2384:	3b 81       	ldd	r19, Y+3	; 0x03
    2386:	21 30       	cpi	r18, 0x01	; 1
    2388:	31 05       	cpc	r19, r1
    238a:	81 f0       	breq	.+32     	; 0x23ac <PWM_StartTimer+0x4a>
    238c:	1d c0       	rjmp	.+58     	; 0x23c8 <PWM_StartTimer+0x66>
		  {
		  case TIMER0:
			  TCCR0_REG.u8Whole_Register &= PWM_CS_CLEAR_MASK;  //clear mask
    238e:	a3 e5       	ldi	r26, 0x53	; 83
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e3 e5       	ldi	r30, 0x53	; 83
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	88 7f       	andi	r24, 0xF8	; 248
    239a:	8c 93       	st	X, r24
			  TCCR0_REG.u8Whole_Register |= PWM_CS0_MODE;  //oring with the value of CS0
    239c:	a3 e5       	ldi	r26, 0x53	; 83
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e3 e5       	ldi	r30, 0x53	; 83
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	84 60       	ori	r24, 0x04	; 4
    23a8:	8c 93       	st	X, r24
    23aa:	0e c0       	rjmp	.+28     	; 0x23c8 <PWM_StartTimer+0x66>
			  break;
		  case TIMER1:
			  TCCR1B_REG.u8Whole_Register &= PWM_CS_CLEAR_MASK; //clear mask
    23ac:	ae e4       	ldi	r26, 0x4E	; 78
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ee e4       	ldi	r30, 0x4E	; 78
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	88 7f       	andi	r24, 0xF8	; 248
    23b8:	8c 93       	st	X, r24
			  TCCR1B_REG.u8Whole_Register |= PWM_CS1_MODE;    //oring with the value of CS1
    23ba:	ae e4       	ldi	r26, 0x4E	; 78
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ee e4       	ldi	r30, 0x4E	; 78
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	83 60       	ori	r24, 0x03	; 3
    23c6:	8c 93       	st	X, r24
			  break;
		  }
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <PWM_StopTimer>:
void PWM_StopTimer(u8 Copy_TimerNo)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <PWM_StopTimer+0x6>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
	 switch(Copy_TimerNo)
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	3b 83       	std	Y+3, r19	; 0x03
    23ea:	2a 83       	std	Y+2, r18	; 0x02
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	9b 81       	ldd	r25, Y+3	; 0x03
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	31 f0       	breq	.+12     	; 0x2400 <PWM_StopTimer+0x2c>
    23f4:	2a 81       	ldd	r18, Y+2	; 0x02
    23f6:	3b 81       	ldd	r19, Y+3	; 0x03
    23f8:	21 30       	cpi	r18, 0x01	; 1
    23fa:	31 05       	cpc	r19, r1
    23fc:	49 f0       	breq	.+18     	; 0x2410 <PWM_StopTimer+0x3c>
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <PWM_StopTimer+0x4a>
	  {
	  case TIMER0:
		  TCCR0_REG.u8Whole_Register &= 0xF8;  //clock select for bits 1,2,3 =0 (1111 1000) to stop timer0
    2400:	a3 e5       	ldi	r26, 0x53	; 83
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e3 e5       	ldi	r30, 0x53	; 83
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	88 7f       	andi	r24, 0xF8	; 248
    240c:	8c 93       	st	X, r24
    240e:	07 c0       	rjmp	.+14     	; 0x241e <PWM_StopTimer+0x4a>
		  break;
	  case TIMER1:
		  TCCR1B_REG.u8Whole_Register &= 0xF8;   //clock select for bits 1,2,3 =0 (1111 1000) to stop timer1
    2410:	ae e4       	ldi	r26, 0x4E	; 78
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ee e4       	ldi	r30, 0x4E	; 78
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	88 7f       	andi	r24, 0xF8	; 248
    241c:	8c 93       	st	X, r24
	  }




}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <main>:
#include "PWM_int.h"
#include "avr/interrupt.h"
#include "LCD_int.h"

int main (void)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	2c 97       	sbiw	r28, 0x0c	; 12
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
     f32 angle=0.0; //declaring a variable to store the value of angle for the motor to rotate
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e0       	ldi	r26, 0x00	; 0
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	89 87       	std	Y+9, r24	; 0x09
    2448:	9a 87       	std	Y+10, r25	; 0x0a
    244a:	ab 87       	std	Y+11, r26	; 0x0b
    244c:	bc 87       	std	Y+12, r27	; 0x0c
     f32 dutycycle=0.0;  //declaring a variable for dutycycle
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 e0       	ldi	r26, 0x00	; 0
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	af 83       	std	Y+7, r26	; 0x07
    245c:	b8 87       	std	Y+8, r27	; 0x08
     f32 adc=0.0;  //declaring a variable to store the value of potentiometer
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e0       	ldi	r26, 0x00	; 0
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	ab 83       	std	Y+3, r26	; 0x03
    246c:	bc 83       	std	Y+4, r27	; 0x04
   DIO_vidSetPinDirection(u8PORTD,DIO_u8_PIN_5,DIO_u8OUTPUT);  //set motor as output
    246e:	84 e0       	ldi	r24, 0x04	; 4
    2470:	65 e0       	ldi	r22, 0x05	; 5
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_vidSetPinDirection>
   DIO_vidSetPinDirection(u8PORTA,DIO_u8_PIN_0,DIO_u8INPUT); //set potentiometer as input
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_vidSetPinDirection>
   DIO_vidSetPinVal(u8PORTA,DIO_u8_PIN_0,DIO_u8HIGH); //pull up resistor
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_vidSetPinVal>
   LCD_vidInit();  //initialize lcd
    248c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_vidInit>
   ADC_vidInit(); //initialize adc
    2490:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_vidInit>
   PWM_vidPWMInit(TIMER1);   //initialization for PWM TIMER1
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 ef 10 	call	0x21de	; 0x21de <PWM_vidPWMInit>
   PWM_StartTimer(TIMER1); //start timer 1
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	0e 94 b1 11 	call	0x2362	; 0x2362 <PWM_StartTimer>



   while(1)
   {
	 adc= ADC_u16Read(ADC_ADMUX_CHANNEL_ADC0);  //read the value of the potentiometer
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 41 07 	call	0xe82	; 0xe82 <ADC_u16Read>
    24a6:	cc 01       	movw	r24, r24
    24a8:	a0 e0       	ldi	r26, 0x00	; 0
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	ab 83       	std	Y+3, r26	; 0x03
    24be:	bc 83       	std	Y+4, r27	; 0x04
	  angle= (adc*180)/1024;   //translate the value of the potentiometer to degrees for the lcd (equivalent value of potentiometer in degrees)
    24c0:	69 81       	ldd	r22, Y+1	; 0x01
    24c2:	7a 81       	ldd	r23, Y+2	; 0x02
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	44 e3       	ldi	r20, 0x34	; 52
    24ce:	53 e4       	ldi	r21, 0x43	; 67
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	54 e4       	ldi	r21, 0x44	; 68
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	89 87       	std	Y+9, r24	; 0x09
    24ee:	9a 87       	std	Y+10, r25	; 0x0a
    24f0:	ab 87       	std	Y+11, r26	; 0x0b
    24f2:	bc 87       	std	Y+12, r27	; 0x0c
	  dutycycle=((5*adc)/1024.0)+5;  //equivalent value of potentiometer for dutycycle for the servo motor
    24f4:	69 81       	ldd	r22, Y+1	; 0x01
    24f6:	7a 81       	ldd	r23, Y+2	; 0x02
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 ea       	ldi	r20, 0xA0	; 160
    2502:	50 e4       	ldi	r21, 0x40	; 64
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	54 e4       	ldi	r21, 0x44	; 68
    2518:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 ea       	ldi	r20, 0xA0	; 160
    252a:	50 e4       	ldi	r21, 0x40	; 64
    252c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8d 83       	std	Y+5, r24	; 0x05
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	af 83       	std	Y+7, r26	; 0x07
    253a:	b8 87       	std	Y+8, r27	; 0x08
	  PWM_vidSetPWMDutyCycle(TIMER1, dutycycle); //servo's dutycycle
    253c:	2d 81       	ldd	r18, Y+5	; 0x05
    253e:	3e 81       	ldd	r19, Y+6	; 0x06
    2540:	4f 81       	ldd	r20, Y+7	; 0x07
    2542:	58 85       	ldd	r21, Y+8	; 0x08
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	ba 01       	movw	r22, r20
    2548:	a9 01       	movw	r20, r18
    254a:	0e 94 44 11 	call	0x2288	; 0x2288 <PWM_vidSetPWMDutyCycle>
	   LCD_vidGoTo(0,0); //cursor movement
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_vidGoTo>
	  LCD_vidWriteData((((u32)angle/100)%10)+'0'); //ascii relevant value of the number to be printed on the lcd screen
    2556:	69 85       	ldd	r22, Y+9	; 0x09
    2558:	7a 85       	ldd	r23, Y+10	; 0x0a
    255a:	8b 85       	ldd	r24, Y+11	; 0x0b
    255c:	9c 85       	ldd	r25, Y+12	; 0x0c
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	24 e6       	ldi	r18, 0x64	; 100
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    2576:	da 01       	movw	r26, r20
    2578:	c9 01       	movw	r24, r18
    257a:	2a e0       	ldi	r18, 0x0A	; 10
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	80 5d       	subi	r24, 0xD0	; 208
    2590:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <LCD_vidWriteData>
	  LCD_vidGoTo(0,1); //cursor movement one step
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_vidGoTo>
	  LCD_vidWriteData((((u32)angle/10)%10)+'0'); //ascii relevant value of the number to be printed on the lcd screen
    259c:	69 85       	ldd	r22, Y+9	; 0x09
    259e:	7a 85       	ldd	r23, Y+10	; 0x0a
    25a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	2a e0       	ldi	r18, 0x0A	; 10
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    25bc:	da 01       	movw	r26, r20
    25be:	c9 01       	movw	r24, r18
    25c0:	2a e0       	ldi	r18, 0x0A	; 10
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	80 5d       	subi	r24, 0xD0	; 208
    25d6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <LCD_vidWriteData>
	  LCD_vidGoTo(0,2); //cursor movement one step
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_vidGoTo>
	  LCD_vidWriteData(((u32)angle%10)+'0'); //ascii relevant value of the number to be printed on the screen
    25e2:	69 85       	ldd	r22, Y+9	; 0x09
    25e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    25e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	2a e0       	ldi	r18, 0x0A	; 10
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	80 5d       	subi	r24, 0xD0	; 208
    2608:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <LCD_vidWriteData>
    260c:	49 cf       	rjmp	.-366    	; 0x24a0 <main+0x76>

0000260e <__udivmodsi4>:
    260e:	a1 e2       	ldi	r26, 0x21	; 33
    2610:	1a 2e       	mov	r1, r26
    2612:	aa 1b       	sub	r26, r26
    2614:	bb 1b       	sub	r27, r27
    2616:	fd 01       	movw	r30, r26
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <__udivmodsi4_ep>

0000261a <__udivmodsi4_loop>:
    261a:	aa 1f       	adc	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	ee 1f       	adc	r30, r30
    2620:	ff 1f       	adc	r31, r31
    2622:	a2 17       	cp	r26, r18
    2624:	b3 07       	cpc	r27, r19
    2626:	e4 07       	cpc	r30, r20
    2628:	f5 07       	cpc	r31, r21
    262a:	20 f0       	brcs	.+8      	; 0x2634 <__udivmodsi4_ep>
    262c:	a2 1b       	sub	r26, r18
    262e:	b3 0b       	sbc	r27, r19
    2630:	e4 0b       	sbc	r30, r20
    2632:	f5 0b       	sbc	r31, r21

00002634 <__udivmodsi4_ep>:
    2634:	66 1f       	adc	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	1a 94       	dec	r1
    263e:	69 f7       	brne	.-38     	; 0x261a <__udivmodsi4_loop>
    2640:	60 95       	com	r22
    2642:	70 95       	com	r23
    2644:	80 95       	com	r24
    2646:	90 95       	com	r25
    2648:	9b 01       	movw	r18, r22
    264a:	ac 01       	movw	r20, r24
    264c:	bd 01       	movw	r22, r26
    264e:	cf 01       	movw	r24, r30
    2650:	08 95       	ret

00002652 <__prologue_saves__>:
    2652:	2f 92       	push	r2
    2654:	3f 92       	push	r3
    2656:	4f 92       	push	r4
    2658:	5f 92       	push	r5
    265a:	6f 92       	push	r6
    265c:	7f 92       	push	r7
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	ca 1b       	sub	r28, r26
    267c:	db 0b       	sbc	r29, r27
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	09 94       	ijmp

0000268a <__epilogue_restores__>:
    268a:	2a 88       	ldd	r2, Y+18	; 0x12
    268c:	39 88       	ldd	r3, Y+17	; 0x11
    268e:	48 88       	ldd	r4, Y+16	; 0x10
    2690:	5f 84       	ldd	r5, Y+15	; 0x0f
    2692:	6e 84       	ldd	r6, Y+14	; 0x0e
    2694:	7d 84       	ldd	r7, Y+13	; 0x0d
    2696:	8c 84       	ldd	r8, Y+12	; 0x0c
    2698:	9b 84       	ldd	r9, Y+11	; 0x0b
    269a:	aa 84       	ldd	r10, Y+10	; 0x0a
    269c:	b9 84       	ldd	r11, Y+9	; 0x09
    269e:	c8 84       	ldd	r12, Y+8	; 0x08
    26a0:	df 80       	ldd	r13, Y+7	; 0x07
    26a2:	ee 80       	ldd	r14, Y+6	; 0x06
    26a4:	fd 80       	ldd	r15, Y+5	; 0x05
    26a6:	0c 81       	ldd	r16, Y+4	; 0x04
    26a8:	1b 81       	ldd	r17, Y+3	; 0x03
    26aa:	aa 81       	ldd	r26, Y+2	; 0x02
    26ac:	b9 81       	ldd	r27, Y+1	; 0x01
    26ae:	ce 0f       	add	r28, r30
    26b0:	d1 1d       	adc	r29, r1
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	ed 01       	movw	r28, r26
    26be:	08 95       	ret

000026c0 <_exit>:
    26c0:	f8 94       	cli

000026c2 <__stop_program>:
    26c2:	ff cf       	rjmp	.-2      	; 0x26c2 <__stop_program>
