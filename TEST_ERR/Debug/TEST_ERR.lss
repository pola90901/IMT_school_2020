
TEST_ERR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000984  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009f1  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_1>
   8:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <main>
  64:	0c 94 8c 04 	jmp	0x918	; 0x918 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_U8GetPin>:
#include "DIO_int.h"



u8 DIO_U8GetPin(u8 Copy_PortX, u8 Copy_PinX)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_U8GetPin+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_U8GetPin+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 PinLevel;
	if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7))){
  7e:	8a 81       	ldd	r24, Y+2	; 0x02
  80:	88 23       	and	r24, r24
  82:	09 f4       	brne	.+2      	; 0x86 <DIO_U8GetPin+0x1a>
  84:	6f c0       	rjmp	.+222    	; 0x164 <DIO_U8GetPin+0xf8>
  86:	8a 81       	ldd	r24, Y+2	; 0x02
  88:	85 30       	cpi	r24, 0x05	; 5
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_U8GetPin+0x22>
  8c:	6b c0       	rjmp	.+214    	; 0x164 <DIO_U8GetPin+0xf8>
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	08 f0       	brcs	.+2      	; 0x96 <DIO_U8GetPin+0x2a>
  94:	67 c0       	rjmp	.+206    	; 0x164 <DIO_U8GetPin+0xf8>
		switch(Copy_PortX){
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	3d 83       	std	Y+5, r19	; 0x05
  9e:	2c 83       	std	Y+4, r18	; 0x04
  a0:	4c 81       	ldd	r20, Y+4	; 0x04
  a2:	5d 81       	ldd	r21, Y+5	; 0x05
  a4:	42 30       	cpi	r20, 0x02	; 2
  a6:	51 05       	cpc	r21, r1
  a8:	41 f1       	breq	.+80     	; 0xfa <DIO_U8GetPin+0x8e>
  aa:	8c 81       	ldd	r24, Y+4	; 0x04
  ac:	9d 81       	ldd	r25, Y+5	; 0x05
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	91 05       	cpc	r25, r1
  b2:	34 f4       	brge	.+12     	; 0xc0 <DIO_U8GetPin+0x54>
  b4:	2c 81       	ldd	r18, Y+4	; 0x04
  b6:	3d 81       	ldd	r19, Y+5	; 0x05
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	31 05       	cpc	r19, r1
  bc:	61 f0       	breq	.+24     	; 0xd6 <DIO_U8GetPin+0x6a>
  be:	52 c0       	rjmp	.+164    	; 0x164 <DIO_U8GetPin+0xf8>
  c0:	4c 81       	ldd	r20, Y+4	; 0x04
  c2:	5d 81       	ldd	r21, Y+5	; 0x05
  c4:	43 30       	cpi	r20, 0x03	; 3
  c6:	51 05       	cpc	r21, r1
  c8:	51 f1       	breq	.+84     	; 0x11e <DIO_U8GetPin+0xb2>
  ca:	8c 81       	ldd	r24, Y+4	; 0x04
  cc:	9d 81       	ldd	r25, Y+5	; 0x05
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	91 05       	cpc	r25, r1
  d2:	b9 f1       	breq	.+110    	; 0x142 <DIO_U8GetPin+0xd6>
  d4:	47 c0       	rjmp	.+142    	; 0x164 <DIO_U8GetPin+0xf8>
		case u8PORTA:
			PinLevel = GET_BIT(PINA_REG,Copy_PinX);
  d6:	e9 e3       	ldi	r30, 0x39	; 57
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	28 2f       	mov	r18, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	88 2f       	mov	r24, r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a9 01       	movw	r20, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_U8GetPin+0x82>
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_U8GetPin+0x7e>
  f2:	ca 01       	movw	r24, r20
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	35 c0       	rjmp	.+106    	; 0x164 <DIO_U8GetPin+0xf8>
			break;
		case u8PORTB:
			PinLevel = GET_BIT(PINB_REG,Copy_PinX);
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	a9 01       	movw	r20, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_U8GetPin+0xa6>
 10e:	55 95       	asr	r21
 110:	47 95       	ror	r20
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_U8GetPin+0xa2>
 116:	ca 01       	movw	r24, r20
 118:	81 70       	andi	r24, 0x01	; 1
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	23 c0       	rjmp	.+70     	; 0x164 <DIO_U8GetPin+0xf8>
			break;
		case u8PORTC:
			PinLevel = GET_BIT(PINC_REG,Copy_PinX);
 11e:	e3 e3       	ldi	r30, 0x33	; 51
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a9 01       	movw	r20, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_U8GetPin+0xca>
 132:	55 95       	asr	r21
 134:	47 95       	ror	r20
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_U8GetPin+0xc6>
 13a:	ca 01       	movw	r24, r20
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	89 83       	std	Y+1, r24	; 0x01
 140:	11 c0       	rjmp	.+34     	; 0x164 <DIO_U8GetPin+0xf8>
			break;
		case u8PORTD:
			PinLevel = GET_BIT(PIND_REG,Copy_PinX);
 142:	e0 e3       	ldi	r30, 0x30	; 48
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	a9 01       	movw	r20, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_U8GetPin+0xee>
 156:	55 95       	asr	r21
 158:	47 95       	ror	r20
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_U8GetPin+0xea>
 15e:	ca 01       	movw	r24, r20
 160:	81 70       	andi	r24, 0x01	; 1
 162:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return PinLevel;
 164:	89 81       	ldd	r24, Y+1	; 0x01
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	cf 91       	pop	r28
 172:	df 91       	pop	r29
 174:	08 95       	ret

00000176 <DIO_vidSetPinVal>:



void DIO_vidSetPinVal(u8 Copy_PortX,u8 Copy_PinX,u8 Copy_Value)
{
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	27 97       	sbiw	r28, 0x07	; 7
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	6a 83       	std	Y+2, r22	; 0x02
 18e:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)))
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 23       	and	r24, r24
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_vidSetPinVal+0x22>
 196:	f4 c0       	rjmp	.+488    	; 0x380 <DIO_vidSetPinVal+0x20a>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <DIO_vidSetPinVal+0x2a>
 19e:	f0 c0       	rjmp	.+480    	; 0x380 <DIO_vidSetPinVal+0x20a>
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <DIO_vidSetPinVal+0x32>
 1a6:	ec c0       	rjmp	.+472    	; 0x380 <DIO_vidSetPinVal+0x20a>
	{
		if(Copy_Value == DIO_u8LOW)
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	88 23       	and	r24, r24
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <DIO_vidSetPinVal+0x3a>
 1ae:	75 c0       	rjmp	.+234    	; 0x29a <DIO_vidSetPinVal+0x124>
		{
			switch(Copy_PortX)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	3f 83       	std	Y+7, r19	; 0x07
 1b8:	2e 83       	std	Y+6, r18	; 0x06
 1ba:	8e 81       	ldd	r24, Y+6	; 0x06
 1bc:	9f 81       	ldd	r25, Y+7	; 0x07
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	91 05       	cpc	r25, r1
 1c2:	61 f1       	breq	.+88     	; 0x21c <DIO_vidSetPinVal+0xa6>
 1c4:	2e 81       	ldd	r18, Y+6	; 0x06
 1c6:	3f 81       	ldd	r19, Y+7	; 0x07
 1c8:	23 30       	cpi	r18, 0x03	; 3
 1ca:	31 05       	cpc	r19, r1
 1cc:	34 f4       	brge	.+12     	; 0x1da <DIO_vidSetPinVal+0x64>
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	9f 81       	ldd	r25, Y+7	; 0x07
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 05       	cpc	r25, r1
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <DIO_vidSetPinVal+0x7c>
 1d8:	d3 c0       	rjmp	.+422    	; 0x380 <DIO_vidSetPinVal+0x20a>
 1da:	2e 81       	ldd	r18, Y+6	; 0x06
 1dc:	3f 81       	ldd	r19, Y+7	; 0x07
 1de:	23 30       	cpi	r18, 0x03	; 3
 1e0:	31 05       	cpc	r19, r1
 1e2:	89 f1       	breq	.+98     	; 0x246 <DIO_vidSetPinVal+0xd0>
 1e4:	8e 81       	ldd	r24, Y+6	; 0x06
 1e6:	9f 81       	ldd	r25, Y+7	; 0x07
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	91 05       	cpc	r25, r1
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <DIO_vidSetPinVal+0x7a>
 1ee:	40 c0       	rjmp	.+128    	; 0x270 <DIO_vidSetPinVal+0xfa>
 1f0:	c7 c0       	rjmp	.+398    	; 0x380 <DIO_vidSetPinVal+0x20a>
			{
			case u8PORTA:
				CLR_BIT(PORTA_REG,Copy_PinX);
 1f2:	ab e3       	ldi	r26, 0x3B	; 59
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	eb e3       	ldi	r30, 0x3B	; 59
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_vidSetPinVal+0x9a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_vidSetPinVal+0x96>
 214:	80 95       	com	r24
 216:	84 23       	and	r24, r20
 218:	8c 93       	st	X, r24
 21a:	b2 c0       	rjmp	.+356    	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			case u8PORTB:
				CLR_BIT(PORTB_REG,Copy_PinX);
 21c:	a8 e3       	ldi	r26, 0x38	; 56
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e8 e3       	ldi	r30, 0x38	; 56
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidSetPinVal+0xc4>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidSetPinVal+0xc0>
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8c 93       	st	X, r24
 244:	9d c0       	rjmp	.+314    	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			case u8PORTC:
				CLR_BIT(PORTC_REG,Copy_PinX);
 246:	a5 e3       	ldi	r26, 0x35	; 53
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e5 e3       	ldi	r30, 0x35	; 53
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 2e       	mov	r0, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_vidSetPinVal+0xee>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_vidSetPinVal+0xea>
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8c 93       	st	X, r24
 26e:	88 c0       	rjmp	.+272    	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			case u8PORTD:
				CLR_BIT(PORTD_REG,Copy_PinX);
 270:	a2 e3       	ldi	r26, 0x32	; 50
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e2 e3       	ldi	r30, 0x32	; 50
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	48 2f       	mov	r20, r24
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 2e       	mov	r0, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vidSetPinVal+0x118>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vidSetPinVal+0x114>
 292:	80 95       	com	r24
 294:	84 23       	and	r24, r20
 296:	8c 93       	st	X, r24
 298:	73 c0       	rjmp	.+230    	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			}
		}
		else if(Copy_Value== DIO_u8HIGH)
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	09 f0       	breq	.+2      	; 0x2a2 <DIO_vidSetPinVal+0x12c>
 2a0:	6f c0       	rjmp	.+222    	; 0x380 <DIO_vidSetPinVal+0x20a>
		{
			switch(Copy_PortX)
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	3d 83       	std	Y+5, r19	; 0x05
 2aa:	2c 83       	std	Y+4, r18	; 0x04
 2ac:	8c 81       	ldd	r24, Y+4	; 0x04
 2ae:	9d 81       	ldd	r25, Y+5	; 0x05
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	91 05       	cpc	r25, r1
 2b4:	51 f1       	breq	.+84     	; 0x30a <DIO_vidSetPinVal+0x194>
 2b6:	2c 81       	ldd	r18, Y+4	; 0x04
 2b8:	3d 81       	ldd	r19, Y+5	; 0x05
 2ba:	23 30       	cpi	r18, 0x03	; 3
 2bc:	31 05       	cpc	r19, r1
 2be:	34 f4       	brge	.+12     	; 0x2cc <DIO_vidSetPinVal+0x156>
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	9d 81       	ldd	r25, Y+5	; 0x05
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	91 05       	cpc	r25, r1
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_vidSetPinVal+0x16c>
 2ca:	5a c0       	rjmp	.+180    	; 0x380 <DIO_vidSetPinVal+0x20a>
 2cc:	2c 81       	ldd	r18, Y+4	; 0x04
 2ce:	3d 81       	ldd	r19, Y+5	; 0x05
 2d0:	23 30       	cpi	r18, 0x03	; 3
 2d2:	31 05       	cpc	r19, r1
 2d4:	71 f1       	breq	.+92     	; 0x332 <DIO_vidSetPinVal+0x1bc>
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	9d 81       	ldd	r25, Y+5	; 0x05
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	91 05       	cpc	r25, r1
 2de:	e9 f1       	breq	.+122    	; 0x35a <DIO_vidSetPinVal+0x1e4>
 2e0:	4f c0       	rjmp	.+158    	; 0x380 <DIO_vidSetPinVal+0x20a>
			{
			case u8PORTA:
				SET_BIT(PORTA_REG,Copy_PinX);
 2e2:	ab e3       	ldi	r26, 0x3B	; 59
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	eb e3       	ldi	r30, 0x3B	; 59
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_vidSetPinVal+0x18a>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_vidSetPinVal+0x186>
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
 308:	3b c0       	rjmp	.+118    	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			case u8PORTB:
				SET_BIT(PORTB_REG,Copy_PinX);
 30a:	a8 e3       	ldi	r26, 0x38	; 56
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_vidSetPinVal+0x1b2>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_vidSetPinVal+0x1ae>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	27 c0       	rjmp	.+78     	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			case u8PORTC:
				SET_BIT(PORTC_REG,Copy_PinX);
 332:	a5 e3       	ldi	r26, 0x35	; 53
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e5 e3       	ldi	r30, 0x35	; 53
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_vidSetPinVal+0x1da>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_vidSetPinVal+0x1d6>
 354:	84 2b       	or	r24, r20
 356:	8c 93       	st	X, r24
 358:	13 c0       	rjmp	.+38     	; 0x380 <DIO_vidSetPinVal+0x20a>
				break;
			case u8PORTD:
				SET_BIT(PORTD_REG,Copy_PinX);
 35a:	a2 e3       	ldi	r26, 0x32	; 50
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e2 e3       	ldi	r30, 0x32	; 50
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_vidSetPinVal+0x202>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_vidSetPinVal+0x1fe>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
		else
		{

		}
	}
}
 380:	27 96       	adiw	r28, 0x07	; 7
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <DIO_vidTogglePinVal>:
	void DIO_vidTogglePinVal(u8 Copy_PortX,u8 Copy_PinX)
	{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	00 d0       	rcall	.+0      	; 0x398 <DIO_vidTogglePinVal+0x6>
 398:	00 d0       	rcall	.+0      	; 0x39a <DIO_vidTogglePinVal+0x8>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	6a 83       	std	Y+2, r22	; 0x02
		if((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)))
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 23       	and	r24, r24
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DIO_vidTogglePinVal+0x18>
 3a8:	77 c0       	rjmp	.+238    	; 0x498 <DIO_vidTogglePinVal+0x106>
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	85 30       	cpi	r24, 0x05	; 5
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_vidTogglePinVal+0x20>
 3b0:	73 c0       	rjmp	.+230    	; 0x498 <DIO_vidTogglePinVal+0x106>
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <DIO_vidTogglePinVal+0x28>
 3b8:	6f c0       	rjmp	.+222    	; 0x498 <DIO_vidTogglePinVal+0x106>
			{
		  	switch(Copy_PortX)
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	3c 83       	std	Y+4, r19	; 0x04
 3c2:	2b 83       	std	Y+3, r18	; 0x03
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	9c 81       	ldd	r25, Y+4	; 0x04
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	91 05       	cpc	r25, r1
 3cc:	51 f1       	breq	.+84     	; 0x422 <DIO_vidTogglePinVal+0x90>
 3ce:	2b 81       	ldd	r18, Y+3	; 0x03
 3d0:	3c 81       	ldd	r19, Y+4	; 0x04
 3d2:	23 30       	cpi	r18, 0x03	; 3
 3d4:	31 05       	cpc	r19, r1
 3d6:	34 f4       	brge	.+12     	; 0x3e4 <DIO_vidTogglePinVal+0x52>
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	91 05       	cpc	r25, r1
 3e0:	61 f0       	breq	.+24     	; 0x3fa <DIO_vidTogglePinVal+0x68>
 3e2:	5a c0       	rjmp	.+180    	; 0x498 <DIO_vidTogglePinVal+0x106>
 3e4:	2b 81       	ldd	r18, Y+3	; 0x03
 3e6:	3c 81       	ldd	r19, Y+4	; 0x04
 3e8:	23 30       	cpi	r18, 0x03	; 3
 3ea:	31 05       	cpc	r19, r1
 3ec:	71 f1       	breq	.+92     	; 0x44a <DIO_vidTogglePinVal+0xb8>
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	9c 81       	ldd	r25, Y+4	; 0x04
 3f2:	84 30       	cpi	r24, 0x04	; 4
 3f4:	91 05       	cpc	r25, r1
 3f6:	e9 f1       	breq	.+122    	; 0x472 <DIO_vidTogglePinVal+0xe0>
 3f8:	4f c0       	rjmp	.+158    	; 0x498 <DIO_vidTogglePinVal+0x106>
					{
					case u8PORTA:
						TGL_BIT(PORTA_REG,Copy_PinX);
 3fa:	ab e3       	ldi	r26, 0x3B	; 59
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	eb e3       	ldi	r30, 0x3B	; 59
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	48 2f       	mov	r20, r24
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 2e       	mov	r0, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_vidTogglePinVal+0x86>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_vidTogglePinVal+0x82>
 41c:	84 27       	eor	r24, r20
 41e:	8c 93       	st	X, r24
 420:	3b c0       	rjmp	.+118    	; 0x498 <DIO_vidTogglePinVal+0x106>
						break;
					case u8PORTB:
						TGL_BIT(PORTB_REG,Copy_PinX);
 422:	a8 e3       	ldi	r26, 0x38	; 56
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e8 e3       	ldi	r30, 0x38	; 56
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_vidTogglePinVal+0xae>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_vidTogglePinVal+0xaa>
 444:	84 27       	eor	r24, r20
 446:	8c 93       	st	X, r24
 448:	27 c0       	rjmp	.+78     	; 0x498 <DIO_vidTogglePinVal+0x106>
						break;
					case u8PORTC:
						TGL_BIT(PORTC_REG,Copy_PinX);
 44a:	a5 e3       	ldi	r26, 0x35	; 53
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	e5 e3       	ldi	r30, 0x35	; 53
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_vidTogglePinVal+0xd6>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_vidTogglePinVal+0xd2>
 46c:	84 27       	eor	r24, r20
 46e:	8c 93       	st	X, r24
 470:	13 c0       	rjmp	.+38     	; 0x498 <DIO_vidTogglePinVal+0x106>
						break;
					case u8PORTD:
						TGL_BIT(PORTD_REG,Copy_PinX);
 472:	a2 e3       	ldi	r26, 0x32	; 50
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e2 e3       	ldi	r30, 0x32	; 50
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_vidTogglePinVal+0xfe>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_vidTogglePinVal+0xfa>
 494:	84 27       	eor	r24, r20
 496:	8c 93       	st	X, r24
		else
		{

		}

	}
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	cf 91       	pop	r28
 4a2:	df 91       	pop	r29
 4a4:	08 95       	ret

000004a6 <DIO_vidSetPinDirection>:

	void DIO_vidSetPinDirection(u8 Copy_PortX,u8 Copy_PinX,u8 Copy_Direction)
	{
 4a6:	df 93       	push	r29
 4a8:	cf 93       	push	r28
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	27 97       	sbiw	r28, 0x07	; 7
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	89 83       	std	Y+1, r24	; 0x01
 4bc:	6a 83       	std	Y+2, r22	; 0x02
 4be:	4b 83       	std	Y+3, r20	; 0x03
		if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)) \
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	88 23       	and	r24, r24
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <DIO_vidSetPinDirection+0x22>
 4c6:	fb c0       	rjmp	.+502    	; 0x6be <DIO_vidSetPinDirection+0x218>
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	85 30       	cpi	r24, 0x05	; 5
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <DIO_vidSetPinDirection+0x2a>
 4ce:	f7 c0       	rjmp	.+494    	; 0x6be <DIO_vidSetPinDirection+0x218>
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	88 30       	cpi	r24, 0x08	; 8
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <DIO_vidSetPinDirection+0x32>
 4d6:	f3 c0       	rjmp	.+486    	; 0x6be <DIO_vidSetPinDirection+0x218>
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	88 23       	and	r24, r24
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <DIO_vidSetPinDirection+0x40>
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <DIO_vidSetPinDirection+0x40>
 4e4:	ec c0       	rjmp	.+472    	; 0x6be <DIO_vidSetPinDirection+0x218>
				&& ((Copy_Direction == DIO_u8INPUT) || (Copy_Direction == DIO_u8OUTPUT)))
		{
			if(Copy_Direction == DIO_u8INPUT)
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	88 23       	and	r24, r24
 4ea:	09 f0       	breq	.+2      	; 0x4ee <DIO_vidSetPinDirection+0x48>
 4ec:	75 c0       	rjmp	.+234    	; 0x5d8 <DIO_vidSetPinDirection+0x132>
			{
				switch(Copy_PortX)
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	3f 83       	std	Y+7, r19	; 0x07
 4f6:	2e 83       	std	Y+6, r18	; 0x06
 4f8:	8e 81       	ldd	r24, Y+6	; 0x06
 4fa:	9f 81       	ldd	r25, Y+7	; 0x07
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	91 05       	cpc	r25, r1
 500:	61 f1       	breq	.+88     	; 0x55a <DIO_vidSetPinDirection+0xb4>
 502:	2e 81       	ldd	r18, Y+6	; 0x06
 504:	3f 81       	ldd	r19, Y+7	; 0x07
 506:	23 30       	cpi	r18, 0x03	; 3
 508:	31 05       	cpc	r19, r1
 50a:	34 f4       	brge	.+12     	; 0x518 <DIO_vidSetPinDirection+0x72>
 50c:	8e 81       	ldd	r24, Y+6	; 0x06
 50e:	9f 81       	ldd	r25, Y+7	; 0x07
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	91 05       	cpc	r25, r1
 514:	69 f0       	breq	.+26     	; 0x530 <DIO_vidSetPinDirection+0x8a>
 516:	d3 c0       	rjmp	.+422    	; 0x6be <DIO_vidSetPinDirection+0x218>
 518:	2e 81       	ldd	r18, Y+6	; 0x06
 51a:	3f 81       	ldd	r19, Y+7	; 0x07
 51c:	23 30       	cpi	r18, 0x03	; 3
 51e:	31 05       	cpc	r19, r1
 520:	89 f1       	breq	.+98     	; 0x584 <DIO_vidSetPinDirection+0xde>
 522:	8e 81       	ldd	r24, Y+6	; 0x06
 524:	9f 81       	ldd	r25, Y+7	; 0x07
 526:	84 30       	cpi	r24, 0x04	; 4
 528:	91 05       	cpc	r25, r1
 52a:	09 f4       	brne	.+2      	; 0x52e <DIO_vidSetPinDirection+0x88>
 52c:	40 c0       	rjmp	.+128    	; 0x5ae <DIO_vidSetPinDirection+0x108>
 52e:	c7 c0       	rjmp	.+398    	; 0x6be <DIO_vidSetPinDirection+0x218>
				{
				case u8PORTA:
					CLR_BIT(DDRA_REG,Copy_PinX);
 530:	aa e3       	ldi	r26, 0x3A	; 58
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	ea e3       	ldi	r30, 0x3A	; 58
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_vidSetPinDirection+0xa8>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_vidSetPinDirection+0xa4>
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	8c 93       	st	X, r24
 558:	b2 c0       	rjmp	.+356    	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTB:
					CLR_BIT(DDRB_REG,Copy_PinX);
 55a:	a7 e3       	ldi	r26, 0x37	; 55
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e7 e3       	ldi	r30, 0x37	; 55
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 2e       	mov	r0, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_vidSetPinDirection+0xd2>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_vidSetPinDirection+0xce>
 57c:	80 95       	com	r24
 57e:	84 23       	and	r24, r20
 580:	8c 93       	st	X, r24
 582:	9d c0       	rjmp	.+314    	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTC:
					CLR_BIT(DDRC_REG,Copy_PinX);
 584:	a4 e3       	ldi	r26, 0x34	; 52
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	e4 e3       	ldi	r30, 0x34	; 52
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	48 2f       	mov	r20, r24
 590:	8a 81       	ldd	r24, Y+2	; 0x02
 592:	28 2f       	mov	r18, r24
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 2e       	mov	r0, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_vidSetPinDirection+0xfc>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_vidSetPinDirection+0xf8>
 5a6:	80 95       	com	r24
 5a8:	84 23       	and	r24, r20
 5aa:	8c 93       	st	X, r24
 5ac:	88 c0       	rjmp	.+272    	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTD:
					CLR_BIT(DDRD_REG,Copy_PinX);
 5ae:	a1 e3       	ldi	r26, 0x31	; 49
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e1 e3       	ldi	r30, 0x31	; 49
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 2e       	mov	r0, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_vidSetPinDirection+0x126>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_vidSetPinDirection+0x122>
 5d0:	80 95       	com	r24
 5d2:	84 23       	and	r24, r20
 5d4:	8c 93       	st	X, r24
 5d6:	73 c0       	rjmp	.+230    	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				}
			}
			else if(Copy_Direction == DIO_u8OUTPUT)
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <DIO_vidSetPinDirection+0x13a>
 5de:	6f c0       	rjmp	.+222    	; 0x6be <DIO_vidSetPinDirection+0x218>
			{
				switch(Copy_PortX)
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	3d 83       	std	Y+5, r19	; 0x05
 5e8:	2c 83       	std	Y+4, r18	; 0x04
 5ea:	8c 81       	ldd	r24, Y+4	; 0x04
 5ec:	9d 81       	ldd	r25, Y+5	; 0x05
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	91 05       	cpc	r25, r1
 5f2:	51 f1       	breq	.+84     	; 0x648 <DIO_vidSetPinDirection+0x1a2>
 5f4:	2c 81       	ldd	r18, Y+4	; 0x04
 5f6:	3d 81       	ldd	r19, Y+5	; 0x05
 5f8:	23 30       	cpi	r18, 0x03	; 3
 5fa:	31 05       	cpc	r19, r1
 5fc:	34 f4       	brge	.+12     	; 0x60a <DIO_vidSetPinDirection+0x164>
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
 600:	9d 81       	ldd	r25, Y+5	; 0x05
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	91 05       	cpc	r25, r1
 606:	61 f0       	breq	.+24     	; 0x620 <DIO_vidSetPinDirection+0x17a>
 608:	5a c0       	rjmp	.+180    	; 0x6be <DIO_vidSetPinDirection+0x218>
 60a:	2c 81       	ldd	r18, Y+4	; 0x04
 60c:	3d 81       	ldd	r19, Y+5	; 0x05
 60e:	23 30       	cpi	r18, 0x03	; 3
 610:	31 05       	cpc	r19, r1
 612:	71 f1       	breq	.+92     	; 0x670 <DIO_vidSetPinDirection+0x1ca>
 614:	8c 81       	ldd	r24, Y+4	; 0x04
 616:	9d 81       	ldd	r25, Y+5	; 0x05
 618:	84 30       	cpi	r24, 0x04	; 4
 61a:	91 05       	cpc	r25, r1
 61c:	e9 f1       	breq	.+122    	; 0x698 <DIO_vidSetPinDirection+0x1f2>
 61e:	4f c0       	rjmp	.+158    	; 0x6be <DIO_vidSetPinDirection+0x218>
				{
				case u8PORTA:
					SET_BIT(DDRA_REG,Copy_PinX);
 620:	aa e3       	ldi	r26, 0x3A	; 58
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	ea e3       	ldi	r30, 0x3A	; 58
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	48 2f       	mov	r20, r24
 62c:	8a 81       	ldd	r24, Y+2	; 0x02
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 2e       	mov	r0, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_vidSetPinDirection+0x198>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_vidSetPinDirection+0x194>
 642:	84 2b       	or	r24, r20
 644:	8c 93       	st	X, r24
 646:	3b c0       	rjmp	.+118    	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTB:
					SET_BIT(DDRB_REG,Copy_PinX);
 648:	a7 e3       	ldi	r26, 0x37	; 55
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	e7 e3       	ldi	r30, 0x37	; 55
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	48 2f       	mov	r20, r24
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	28 2f       	mov	r18, r24
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 2e       	mov	r0, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_vidSetPinDirection+0x1c0>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_vidSetPinDirection+0x1bc>
 66a:	84 2b       	or	r24, r20
 66c:	8c 93       	st	X, r24
 66e:	27 c0       	rjmp	.+78     	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTC:
					SET_BIT(DDRC_REG,Copy_PinX);
 670:	a4 e3       	ldi	r26, 0x34	; 52
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e4 e3       	ldi	r30, 0x34	; 52
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	48 2f       	mov	r20, r24
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 2e       	mov	r0, r18
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_vidSetPinDirection+0x1e8>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	0a 94       	dec	r0
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_vidSetPinDirection+0x1e4>
 692:	84 2b       	or	r24, r20
 694:	8c 93       	st	X, r24
 696:	13 c0       	rjmp	.+38     	; 0x6be <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTD:
					SET_BIT(DDRD_REG,Copy_PinX);
 698:	a1 e3       	ldi	r26, 0x31	; 49
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	e1 e3       	ldi	r30, 0x31	; 49
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	48 2f       	mov	r20, r24
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	28 2f       	mov	r18, r24
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 2e       	mov	r0, r18
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_vidSetPinDirection+0x210>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	0a 94       	dec	r0
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_vidSetPinDirection+0x20c>
 6ba:	84 2b       	or	r24, r20
 6bc:	8c 93       	st	X, r24
		}
		else
		{
			/*  DO NOTHING  */
		}
	}
 6be:	27 96       	adiw	r28, 0x07	; 7
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	cf 91       	pop	r28
 6cc:	df 91       	pop	r29
 6ce:	08 95       	ret

000006d0 <DIO_vidSetPortDirection>:

	void DIO_vidSetPortDirection(u8 Copy_PortX,u8 Copy_Direction)
	{
 6d0:	df 93       	push	r29
 6d2:	cf 93       	push	r28
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <DIO_vidSetPortDirection+0x6>
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <DIO_vidSetPortDirection+0x8>
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	89 83       	std	Y+1, r24	; 0x01
 6de:	6a 83       	std	Y+2, r22	; 0x02
		if((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD))
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	88 23       	and	r24, r24
 6e4:	b1 f1       	breq	.+108    	; 0x752 <DIO_vidSetPortDirection+0x82>
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	85 30       	cpi	r24, 0x05	; 5
 6ea:	98 f5       	brcc	.+102    	; 0x752 <DIO_vidSetPortDirection+0x82>
		{
			switch(Copy_PortX)
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	3c 83       	std	Y+4, r19	; 0x04
 6f4:	2b 83       	std	Y+3, r18	; 0x03
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	9c 81       	ldd	r25, Y+4	; 0x04
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	91 05       	cpc	r25, r1
 6fe:	d9 f0       	breq	.+54     	; 0x736 <DIO_vidSetPortDirection+0x66>
 700:	2b 81       	ldd	r18, Y+3	; 0x03
 702:	3c 81       	ldd	r19, Y+4	; 0x04
 704:	23 30       	cpi	r18, 0x03	; 3
 706:	31 05       	cpc	r19, r1
 708:	34 f4       	brge	.+12     	; 0x716 <DIO_vidSetPortDirection+0x46>
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	9c 81       	ldd	r25, Y+4	; 0x04
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	91 05       	cpc	r25, r1
 712:	61 f0       	breq	.+24     	; 0x72c <DIO_vidSetPortDirection+0x5c>
 714:	1e c0       	rjmp	.+60     	; 0x752 <DIO_vidSetPortDirection+0x82>
 716:	2b 81       	ldd	r18, Y+3	; 0x03
 718:	3c 81       	ldd	r19, Y+4	; 0x04
 71a:	23 30       	cpi	r18, 0x03	; 3
 71c:	31 05       	cpc	r19, r1
 71e:	81 f0       	breq	.+32     	; 0x740 <DIO_vidSetPortDirection+0x70>
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	9c 81       	ldd	r25, Y+4	; 0x04
 724:	84 30       	cpi	r24, 0x04	; 4
 726:	91 05       	cpc	r25, r1
 728:	81 f0       	breq	.+32     	; 0x74a <DIO_vidSetPortDirection+0x7a>
 72a:	13 c0       	rjmp	.+38     	; 0x752 <DIO_vidSetPortDirection+0x82>
			{
			case u8PORTA:
				DDRA_REG =Copy_Direction;
 72c:	ea e3       	ldi	r30, 0x3A	; 58
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	80 83       	st	Z, r24
 734:	0e c0       	rjmp	.+28     	; 0x752 <DIO_vidSetPortDirection+0x82>
				break;
			case u8PORTB:
				DDRB_REG =Copy_Direction;
 736:	e7 e3       	ldi	r30, 0x37	; 55
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	80 83       	st	Z, r24
 73e:	09 c0       	rjmp	.+18     	; 0x752 <DIO_vidSetPortDirection+0x82>
				break;
			case u8PORTC:
				DDRC_REG =Copy_Direction;
 740:	e4 e3       	ldi	r30, 0x34	; 52
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	80 83       	st	Z, r24
 748:	04 c0       	rjmp	.+8      	; 0x752 <DIO_vidSetPortDirection+0x82>
				break;
			case u8PORTD:
				DDRD_REG =Copy_Direction;
 74a:	e1 e3       	ldi	r30, 0x31	; 49
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	80 83       	st	Z, r24
		}
		else
		{

		}
	}
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	cf 91       	pop	r28
 75c:	df 91       	pop	r29
 75e:	08 95       	ret

00000760 <DIO_vidSetPortVal>:

	void DIO_vidSetPortVal(u8 Copy_PortX,u8 Copy_Value)
	{
 760:	df 93       	push	r29
 762:	cf 93       	push	r28
 764:	00 d0       	rcall	.+0      	; 0x766 <DIO_vidSetPortVal+0x6>
 766:	00 d0       	rcall	.+0      	; 0x768 <DIO_vidSetPortVal+0x8>
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	89 83       	std	Y+1, r24	; 0x01
 76e:	6a 83       	std	Y+2, r22	; 0x02
		if((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD))
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	88 23       	and	r24, r24
 774:	b1 f1       	breq	.+108    	; 0x7e2 <DIO_vidSetPortVal+0x82>
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	85 30       	cpi	r24, 0x05	; 5
 77a:	98 f5       	brcc	.+102    	; 0x7e2 <DIO_vidSetPortVal+0x82>
		{
			switch(Copy_PortX)
 77c:	89 81       	ldd	r24, Y+1	; 0x01
 77e:	28 2f       	mov	r18, r24
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	3c 83       	std	Y+4, r19	; 0x04
 784:	2b 83       	std	Y+3, r18	; 0x03
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	9c 81       	ldd	r25, Y+4	; 0x04
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	91 05       	cpc	r25, r1
 78e:	d9 f0       	breq	.+54     	; 0x7c6 <DIO_vidSetPortVal+0x66>
 790:	2b 81       	ldd	r18, Y+3	; 0x03
 792:	3c 81       	ldd	r19, Y+4	; 0x04
 794:	23 30       	cpi	r18, 0x03	; 3
 796:	31 05       	cpc	r19, r1
 798:	34 f4       	brge	.+12     	; 0x7a6 <DIO_vidSetPortVal+0x46>
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	9c 81       	ldd	r25, Y+4	; 0x04
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	91 05       	cpc	r25, r1
 7a2:	61 f0       	breq	.+24     	; 0x7bc <DIO_vidSetPortVal+0x5c>
 7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <DIO_vidSetPortVal+0x82>
 7a6:	2b 81       	ldd	r18, Y+3	; 0x03
 7a8:	3c 81       	ldd	r19, Y+4	; 0x04
 7aa:	23 30       	cpi	r18, 0x03	; 3
 7ac:	31 05       	cpc	r19, r1
 7ae:	81 f0       	breq	.+32     	; 0x7d0 <DIO_vidSetPortVal+0x70>
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	9c 81       	ldd	r25, Y+4	; 0x04
 7b4:	84 30       	cpi	r24, 0x04	; 4
 7b6:	91 05       	cpc	r25, r1
 7b8:	81 f0       	breq	.+32     	; 0x7da <DIO_vidSetPortVal+0x7a>
 7ba:	13 c0       	rjmp	.+38     	; 0x7e2 <DIO_vidSetPortVal+0x82>
			{
			case u8PORTA:
				PORTA_REG = Copy_Value;
 7bc:	eb e3       	ldi	r30, 0x3B	; 59
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	80 83       	st	Z, r24
 7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <DIO_vidSetPortVal+0x82>
				break;
			case u8PORTB:
				PORTB_REG = Copy_Value;
 7c6:	e8 e3       	ldi	r30, 0x38	; 56
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	80 83       	st	Z, r24
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <DIO_vidSetPortVal+0x82>
				break;
			case u8PORTC:
				PORTC_REG = Copy_Value;
 7d0:	e5 e3       	ldi	r30, 0x35	; 53
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	80 83       	st	Z, r24
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <DIO_vidSetPortVal+0x82>
				break;
			case u8PORTD:
				PORTD_REG = Copy_Value;
 7da:	e2 e3       	ldi	r30, 0x32	; 50
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	80 83       	st	Z, r24
		}
		else
		{

		}
	}
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	cf 91       	pop	r28
 7ec:	df 91       	pop	r29
 7ee:	08 95       	ret

000007f0 <main>:
#include "DIO_int.h"
#include<avr/interrupt.h>


int main(void)
{
 7f0:	df 93       	push	r29
 7f2:	cf 93       	push	r28
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
   //setting two pins as output for the leds
  DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_0,DIO_u8OUTPUT);
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_vidSetPinDirection>
  DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_1,DIO_u8OUTPUT);
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_vidSetPinDirection>


  //setting the twu pins for interrupt 0  and interrupt 1

   DIO_vidSetPinDirection(u8PORTD,DIO_u8PIN_2,DIO_u8INPUT);  //INT 0
 80c:	84 e0       	ldi	r24, 0x04	; 4
 80e:	62 e0       	ldi	r22, 0x02	; 2
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_vidSetPinDirection>
   DIO_vidSetPinDirection(u8PORTD,DIO_u8PIN_3,DIO_u8INPUT);  //INT 1
 816:	84 e0       	ldi	r24, 0x04	; 4
 818:	63 e0       	ldi	r22, 0x03	; 3
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_vidSetPinDirection>

   //interrupt trigger mpde IOC
   /*INT 0*/

   MCUCR_REG.Bits.BIT_0=1;
 820:	e5 e5       	ldi	r30, 0x55	; 85
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 83       	st	Z, r24
   MCUCR_REG.Bits.BIT_1=0;
 82a:	e5 e5       	ldi	r30, 0x55	; 85
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	8d 7f       	andi	r24, 0xFD	; 253
 832:	80 83       	st	Z, r24

   /*INT 1*/
   MCUCR_REG.Bits.BIT_2=1;
 834:	e5 e5       	ldi	r30, 0x55	; 85
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	84 60       	ori	r24, 0x04	; 4
 83c:	80 83       	st	Z, r24
   MCUCR_REG.Bits.BIT_3=0;
 83e:	e5 e5       	ldi	r30, 0x55	; 85
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	87 7f       	andi	r24, 0xF7	; 247
 846:	80 83       	st	Z, r24

   //Enabling PIE
   GICR_REG.Bits.BIT_6=1; //INT 0
 848:	eb e5       	ldi	r30, 0x5B	; 91
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	80 64       	ori	r24, 0x40	; 64
 850:	80 83       	st	Z, r24
   GICR_REG.Bits.BIT_7=1; //INT 1
 852:	eb e5       	ldi	r30, 0x5B	; 91
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	80 68       	ori	r24, 0x80	; 128
 85a:	80 83       	st	Z, r24

   //Enabling GIE
    SREG_REG.Bits.BIT_7=1;
 85c:	ef e5       	ldi	r30, 0x5F	; 95
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	80 68       	ori	r24, 0x80	; 128
 864:	80 83       	st	Z, r24
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stack+0x7>

00000868 <__vector_1>:

  return 0;
}

ISR(INT0_vect)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
 88a:	df 93       	push	r29
 88c:	cf 93       	push	r28
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
   DIO_vidTogglePinVal(u8PORTA,DIO_u8PIN_0);
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_vidTogglePinVal>
}
 89a:	cf 91       	pop	r28
 89c:	df 91       	pop	r29
 89e:	ff 91       	pop	r31
 8a0:	ef 91       	pop	r30
 8a2:	bf 91       	pop	r27
 8a4:	af 91       	pop	r26
 8a6:	9f 91       	pop	r25
 8a8:	8f 91       	pop	r24
 8aa:	7f 91       	pop	r23
 8ac:	6f 91       	pop	r22
 8ae:	5f 91       	pop	r21
 8b0:	4f 91       	pop	r20
 8b2:	3f 91       	pop	r19
 8b4:	2f 91       	pop	r18
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <__vector_2>:

ISR(INT1_vect)
{
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
 8ca:	2f 93       	push	r18
 8cc:	3f 93       	push	r19
 8ce:	4f 93       	push	r20
 8d0:	5f 93       	push	r21
 8d2:	6f 93       	push	r22
 8d4:	7f 93       	push	r23
 8d6:	8f 93       	push	r24
 8d8:	9f 93       	push	r25
 8da:	af 93       	push	r26
 8dc:	bf 93       	push	r27
 8de:	ef 93       	push	r30
 8e0:	ff 93       	push	r31
 8e2:	df 93       	push	r29
 8e4:	cf 93       	push	r28
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
	 DIO_vidTogglePinVal(u8PORTA,DIO_u8PIN_1);
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_vidTogglePinVal>
}
 8f2:	cf 91       	pop	r28
 8f4:	df 91       	pop	r29
 8f6:	ff 91       	pop	r31
 8f8:	ef 91       	pop	r30
 8fa:	bf 91       	pop	r27
 8fc:	af 91       	pop	r26
 8fe:	9f 91       	pop	r25
 900:	8f 91       	pop	r24
 902:	7f 91       	pop	r23
 904:	6f 91       	pop	r22
 906:	5f 91       	pop	r21
 908:	4f 91       	pop	r20
 90a:	3f 91       	pop	r19
 90c:	2f 91       	pop	r18
 90e:	0f 90       	pop	r0
 910:	0f be       	out	0x3f, r0	; 63
 912:	0f 90       	pop	r0
 914:	1f 90       	pop	r1
 916:	18 95       	reti

00000918 <_exit>:
 918:	f8 94       	cli

0000091a <__stop_program>:
 91a:	ff cf       	rjmp	.-2      	; 0x91a <__stop_program>
