
interrput_assig.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000806  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000990  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a35  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_1>
   8:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
  64:	0c 94 01 04 	jmp	0x802	; 0x802 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8GetPin>:
#include "types.h"
#include "regiester.h"
#include "DIO_int.h"

u8 DIO_u8GetPin(u8 Copy_PortX, u8 Copy_PinX)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8GetPin+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
  78:	6a 83       	std	Y+2, r22	; 0x02
	return 0;
  7a:	80 e0       	ldi	r24, 0x00	; 0
}
  7c:	0f 90       	pop	r0
  7e:	0f 90       	pop	r0
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	08 95       	ret

00000086 <DIO_vidSetPinVal>:

void DIO_vidSetPinVal(u8 Copy_PortX,u8 Copy_PinX, u8 Copy_Value)
{
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	00 d0       	rcall	.+0      	; 0x8c <DIO_vidSetPinVal+0x6>
  8c:	00 d0       	rcall	.+0      	; 0x8e <DIO_vidSetPinVal+0x8>
  8e:	0f 92       	push	r0
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	89 83       	std	Y+1, r24	; 0x01
  96:	6a 83       	std	Y+2, r22	; 0x02
  98:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_PortX)
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	28 2f       	mov	r18, r24
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	3d 83       	std	Y+5, r19	; 0x05
  a2:	2c 83       	std	Y+4, r18	; 0x04
  a4:	8c 81       	ldd	r24, Y+4	; 0x04
  a6:	9d 81       	ldd	r25, Y+5	; 0x05
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	09 f4       	brne	.+2      	; 0xb0 <DIO_vidSetPinVal+0x2a>
  ae:	48 c0       	rjmp	.+144    	; 0x140 <DIO_vidSetPinVal+0xba>
  b0:	2c 81       	ldd	r18, Y+4	; 0x04
  b2:	3d 81       	ldd	r19, Y+5	; 0x05
  b4:	23 30       	cpi	r18, 0x03	; 3
  b6:	31 05       	cpc	r19, r1
  b8:	34 f4       	brge	.+12     	; 0xc6 <DIO_vidSetPinVal+0x40>
  ba:	8c 81       	ldd	r24, Y+4	; 0x04
  bc:	9d 81       	ldd	r25, Y+5	; 0x05
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	71 f0       	breq	.+28     	; 0xe0 <DIO_vidSetPinVal+0x5a>
  c4:	cb c0       	rjmp	.+406    	; 0x25c <DIO_vidSetPinVal+0x1d6>
  c6:	2c 81       	ldd	r18, Y+4	; 0x04
  c8:	3d 81       	ldd	r19, Y+5	; 0x05
  ca:	23 30       	cpi	r18, 0x03	; 3
  cc:	31 05       	cpc	r19, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_vidSetPinVal+0x4c>
  d0:	67 c0       	rjmp	.+206    	; 0x1a0 <DIO_vidSetPinVal+0x11a>
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	9d 81       	ldd	r25, Y+5	; 0x05
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <DIO_vidSetPinVal+0x58>
  dc:	91 c0       	rjmp	.+290    	; 0x200 <DIO_vidSetPinVal+0x17a>
  de:	be c0       	rjmp	.+380    	; 0x25c <DIO_vidSetPinVal+0x1d6>
	{
	case PORTA://physical port A
		if(Copy_Value == DIO_u8LOW) // input
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	88 23       	and	r24, r24
  e4:	a9 f4       	brne	.+42     	; 0x110 <DIO_vidSetPinVal+0x8a>
		{
			CLR_BIT(PORTA_REG,Copy_PinX);
  e6:	ab e3       	ldi	r26, 0x3B	; 59
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	eb e3       	ldi	r30, 0x3B	; 59
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_vidSetPinVal+0x7e>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_vidSetPinVal+0x7a>
 108:	80 95       	com	r24
 10a:	84 23       	and	r24, r20
 10c:	8c 93       	st	X, r24
 10e:	a6 c0       	rjmp	.+332    	; 0x25c <DIO_vidSetPinVal+0x1d6>

		}
		else if (Copy_Value == DIO_u8HIGH)// output
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	09 f0       	breq	.+2      	; 0x118 <DIO_vidSetPinVal+0x92>
 116:	a2 c0       	rjmp	.+324    	; 0x25c <DIO_vidSetPinVal+0x1d6>
		{
			SET_BIT(PORTA_REG,Copy_PinX);
 118:	ab e3       	ldi	r26, 0x3B	; 59
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	eb e3       	ldi	r30, 0x3B	; 59
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vidSetPinVal+0xb0>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vidSetPinVal+0xac>
 13a:	84 2b       	or	r24, r20
 13c:	8c 93       	st	X, r24
 13e:	8e c0       	rjmp	.+284    	; 0x25c <DIO_vidSetPinVal+0x1d6>




	case PORTB://physical port b
		if(Copy_Value == DIO_u8LOW) // input
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	88 23       	and	r24, r24
 144:	a9 f4       	brne	.+42     	; 0x170 <DIO_vidSetPinVal+0xea>
		{
			CLR_BIT(PORTB_REG,Copy_PinX);
 146:	a8 e3       	ldi	r26, 0x38	; 56
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e8 e3       	ldi	r30, 0x38	; 56
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	48 2f       	mov	r20, r24
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	28 2f       	mov	r18, r24
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 2e       	mov	r0, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_vidSetPinVal+0xde>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_vidSetPinVal+0xda>
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	8c 93       	st	X, r24
 16e:	76 c0       	rjmp	.+236    	; 0x25c <DIO_vidSetPinVal+0x1d6>

		}
		else if (Copy_Value == DIO_u8HIGH)// output
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	09 f0       	breq	.+2      	; 0x178 <DIO_vidSetPinVal+0xf2>
 176:	72 c0       	rjmp	.+228    	; 0x25c <DIO_vidSetPinVal+0x1d6>
		{
			SET_BIT(PORTB_REG,Copy_PinX);
 178:	a8 e3       	ldi	r26, 0x38	; 56
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e8 e3       	ldi	r30, 0x38	; 56
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	48 2f       	mov	r20, r24
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 2e       	mov	r0, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_vidSetPinVal+0x110>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_vidSetPinVal+0x10c>
 19a:	84 2b       	or	r24, r20
 19c:	8c 93       	st	X, r24
 19e:	5e c0       	rjmp	.+188    	; 0x25c <DIO_vidSetPinVal+0x1d6>
		}
		break;


	case PORTC://physical port C
		if(Copy_Value == DIO_u8LOW) // input
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	88 23       	and	r24, r24
 1a4:	a9 f4       	brne	.+42     	; 0x1d0 <DIO_vidSetPinVal+0x14a>
		{
			CLR_BIT(PORTC_REG,Copy_PinX);
 1a6:	a5 e3       	ldi	r26, 0x35	; 53
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e5 e3       	ldi	r30, 0x35	; 53
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 2e       	mov	r0, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_vidSetPinVal+0x13e>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_vidSetPinVal+0x13a>
 1c8:	80 95       	com	r24
 1ca:	84 23       	and	r24, r20
 1cc:	8c 93       	st	X, r24
 1ce:	46 c0       	rjmp	.+140    	; 0x25c <DIO_vidSetPinVal+0x1d6>

		}
		else if (Copy_Value == DIO_u8HIGH)// output
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_vidSetPinVal+0x152>
 1d6:	42 c0       	rjmp	.+132    	; 0x25c <DIO_vidSetPinVal+0x1d6>
		{
			SET_BIT(PORTC_REG,Copy_PinX);
 1d8:	a5 e3       	ldi	r26, 0x35	; 53
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e5 e3       	ldi	r30, 0x35	; 53
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	48 2f       	mov	r20, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_vidSetPinVal+0x170>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_vidSetPinVal+0x16c>
 1fa:	84 2b       	or	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	2e c0       	rjmp	.+92     	; 0x25c <DIO_vidSetPinVal+0x1d6>
		break;



	case PORTD://physical port A
		if(Copy_Value == DIO_u8LOW) // input
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	88 23       	and	r24, r24
 204:	a9 f4       	brne	.+42     	; 0x230 <DIO_vidSetPinVal+0x1aa>
		{
			CLR_BIT(PORTD_REG,Copy_PinX);
 206:	a2 e3       	ldi	r26, 0x32	; 50
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e2 e3       	ldi	r30, 0x32	; 50
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vidSetPinVal+0x19e>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vidSetPinVal+0x19a>
 228:	80 95       	com	r24
 22a:	84 23       	and	r24, r20
 22c:	8c 93       	st	X, r24
 22e:	16 c0       	rjmp	.+44     	; 0x25c <DIO_vidSetPinVal+0x1d6>

		}
		else if (Copy_Value == DIO_u8HIGH)// output
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	99 f4       	brne	.+38     	; 0x25c <DIO_vidSetPinVal+0x1d6>
		{
			SET_BIT(PORTD_REG,Copy_PinX);
 236:	a2 e3       	ldi	r26, 0x32	; 50
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e2 e3       	ldi	r30, 0x32	; 50
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vidSetPinVal+0x1ce>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vidSetPinVal+0x1ca>
 258:	84 2b       	or	r24, r20
 25a:	8c 93       	st	X, r24
		/* default:error code to return
		   break;*/
	}


}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <DIO_vidSetPinDirection>:

void DIO_vidSetPinDirection(u8 Copy_PortX,u8 Copy_PinX, u8 Copy_Direction)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	27 97       	sbiw	r28, 0x07	; 7
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	6a 83       	std	Y+2, r22	; 0x02
 284:	4b 83       	std	Y+3, r20	; 0x03
	if(((Copy_PortX >= PORTA) && (Copy_PortX <= PORTD)) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)) \
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	88 23       	and	r24, r24
 28a:	09 f4       	brne	.+2      	; 0x28e <DIO_vidSetPinDirection+0x22>
 28c:	fb c0       	rjmp	.+502    	; 0x484 <__stack+0x25>
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	85 30       	cpi	r24, 0x05	; 5
 292:	08 f0       	brcs	.+2      	; 0x296 <DIO_vidSetPinDirection+0x2a>
 294:	f7 c0       	rjmp	.+494    	; 0x484 <__stack+0x25>
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	08 f0       	brcs	.+2      	; 0x29e <DIO_vidSetPinDirection+0x32>
 29c:	f3 c0       	rjmp	.+486    	; 0x484 <__stack+0x25>
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	88 23       	and	r24, r24
 2a2:	21 f0       	breq	.+8      	; 0x2ac <DIO_vidSetPinDirection+0x40>
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_vidSetPinDirection+0x40>
 2aa:	ec c0       	rjmp	.+472    	; 0x484 <__stack+0x25>
			&& ((Copy_Direction == DIO_u8INPUT) || (Copy_Direction == DIO_u8OUTPUT)))
	{
		if(Copy_Direction == DIO_u8INPUT)
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 23       	and	r24, r24
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <DIO_vidSetPinDirection+0x48>
 2b2:	75 c0       	rjmp	.+234    	; 0x39e <DIO_vidSetPinDirection+0x132>
		{
			switch(Copy_PortX)
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3f 83       	std	Y+7, r19	; 0x07
 2bc:	2e 83       	std	Y+6, r18	; 0x06
 2be:	8e 81       	ldd	r24, Y+6	; 0x06
 2c0:	9f 81       	ldd	r25, Y+7	; 0x07
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	91 05       	cpc	r25, r1
 2c6:	61 f1       	breq	.+88     	; 0x320 <DIO_vidSetPinDirection+0xb4>
 2c8:	2e 81       	ldd	r18, Y+6	; 0x06
 2ca:	3f 81       	ldd	r19, Y+7	; 0x07
 2cc:	23 30       	cpi	r18, 0x03	; 3
 2ce:	31 05       	cpc	r19, r1
 2d0:	34 f4       	brge	.+12     	; 0x2de <DIO_vidSetPinDirection+0x72>
 2d2:	8e 81       	ldd	r24, Y+6	; 0x06
 2d4:	9f 81       	ldd	r25, Y+7	; 0x07
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	91 05       	cpc	r25, r1
 2da:	69 f0       	breq	.+26     	; 0x2f6 <DIO_vidSetPinDirection+0x8a>
 2dc:	d3 c0       	rjmp	.+422    	; 0x484 <__stack+0x25>
 2de:	2e 81       	ldd	r18, Y+6	; 0x06
 2e0:	3f 81       	ldd	r19, Y+7	; 0x07
 2e2:	23 30       	cpi	r18, 0x03	; 3
 2e4:	31 05       	cpc	r19, r1
 2e6:	89 f1       	breq	.+98     	; 0x34a <DIO_vidSetPinDirection+0xde>
 2e8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ea:	9f 81       	ldd	r25, Y+7	; 0x07
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	91 05       	cpc	r25, r1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_vidSetPinDirection+0x88>
 2f2:	40 c0       	rjmp	.+128    	; 0x374 <DIO_vidSetPinDirection+0x108>
 2f4:	c7 c0       	rjmp	.+398    	; 0x484 <__stack+0x25>
			{
			case PORTA:
				CLR_BIT(DDRA_REG,Copy_PinX);
 2f6:	aa e3       	ldi	r26, 0x3A	; 58
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	ea e3       	ldi	r30, 0x3A	; 58
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vidSetPinDirection+0xa8>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vidSetPinDirection+0xa4>
 318:	80 95       	com	r24
 31a:	84 23       	and	r24, r20
 31c:	8c 93       	st	X, r24
 31e:	b2 c0       	rjmp	.+356    	; 0x484 <__stack+0x25>
				break;
			case PORTB:
				CLR_BIT(DDRB_REG,Copy_PinX);
 320:	a7 e3       	ldi	r26, 0x37	; 55
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	e7 e3       	ldi	r30, 0x37	; 55
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	48 2f       	mov	r20, r24
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_vidSetPinDirection+0xd2>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_vidSetPinDirection+0xce>
 342:	80 95       	com	r24
 344:	84 23       	and	r24, r20
 346:	8c 93       	st	X, r24
 348:	9d c0       	rjmp	.+314    	; 0x484 <__stack+0x25>
				break;
			case PORTC:
				CLR_BIT(DDRC_REG,Copy_PinX);
 34a:	a4 e3       	ldi	r26, 0x34	; 52
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e4 e3       	ldi	r30, 0x34	; 52
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_vidSetPinDirection+0xfc>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_vidSetPinDirection+0xf8>
 36c:	80 95       	com	r24
 36e:	84 23       	and	r24, r20
 370:	8c 93       	st	X, r24
 372:	88 c0       	rjmp	.+272    	; 0x484 <__stack+0x25>
				break;
			case PORTD:
				CLR_BIT(DDRD_REG,Copy_PinX);
 374:	a1 e3       	ldi	r26, 0x31	; 49
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e1 e3       	ldi	r30, 0x31	; 49
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	48 2f       	mov	r20, r24
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 2e       	mov	r0, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_vidSetPinDirection+0x126>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_vidSetPinDirection+0x122>
 396:	80 95       	com	r24
 398:	84 23       	and	r24, r20
 39a:	8c 93       	st	X, r24
 39c:	73 c0       	rjmp	.+230    	; 0x484 <__stack+0x25>
				break;
			}
		}
		else if(Copy_Direction == DIO_u8OUTPUT)
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <DIO_vidSetPinDirection+0x13a>
 3a4:	6f c0       	rjmp	.+222    	; 0x484 <__stack+0x25>
		{
			switch(Copy_PortX)
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	3d 83       	std	Y+5, r19	; 0x05
 3ae:	2c 83       	std	Y+4, r18	; 0x04
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	9d 81       	ldd	r25, Y+5	; 0x05
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	91 05       	cpc	r25, r1
 3b8:	51 f1       	breq	.+84     	; 0x40e <DIO_vidSetPinDirection+0x1a2>
 3ba:	2c 81       	ldd	r18, Y+4	; 0x04
 3bc:	3d 81       	ldd	r19, Y+5	; 0x05
 3be:	23 30       	cpi	r18, 0x03	; 3
 3c0:	31 05       	cpc	r19, r1
 3c2:	34 f4       	brge	.+12     	; 0x3d0 <DIO_vidSetPinDirection+0x164>
 3c4:	8c 81       	ldd	r24, Y+4	; 0x04
 3c6:	9d 81       	ldd	r25, Y+5	; 0x05
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	91 05       	cpc	r25, r1
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <DIO_vidSetPinDirection+0x17a>
 3ce:	5a c0       	rjmp	.+180    	; 0x484 <__stack+0x25>
 3d0:	2c 81       	ldd	r18, Y+4	; 0x04
 3d2:	3d 81       	ldd	r19, Y+5	; 0x05
 3d4:	23 30       	cpi	r18, 0x03	; 3
 3d6:	31 05       	cpc	r19, r1
 3d8:	71 f1       	breq	.+92     	; 0x436 <DIO_vidSetPinDirection+0x1ca>
 3da:	8c 81       	ldd	r24, Y+4	; 0x04
 3dc:	9d 81       	ldd	r25, Y+5	; 0x05
 3de:	84 30       	cpi	r24, 0x04	; 4
 3e0:	91 05       	cpc	r25, r1
 3e2:	e9 f1       	breq	.+122    	; 0x45e <DIO_vidSetPinDirection+0x1f2>
 3e4:	4f c0       	rjmp	.+158    	; 0x484 <__stack+0x25>
			{
			case PORTA:
				SET_BIT(DDRA_REG,Copy_PinX);
 3e6:	aa e3       	ldi	r26, 0x3A	; 58
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	ea e3       	ldi	r30, 0x3A	; 58
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 2e       	mov	r0, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_vidSetPinDirection+0x198>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_vidSetPinDirection+0x194>
 408:	84 2b       	or	r24, r20
 40a:	8c 93       	st	X, r24
 40c:	3b c0       	rjmp	.+118    	; 0x484 <__stack+0x25>
				break;
			case PORTB:
				SET_BIT(DDRB_REG,Copy_PinX);
 40e:	a7 e3       	ldi	r26, 0x37	; 55
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e7 e3       	ldi	r30, 0x37	; 55
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	48 2f       	mov	r20, r24
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_vidSetPinDirection+0x1c0>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_vidSetPinDirection+0x1bc>
 430:	84 2b       	or	r24, r20
 432:	8c 93       	st	X, r24
 434:	27 c0       	rjmp	.+78     	; 0x484 <__stack+0x25>
				break;
			case PORTC:
				SET_BIT(DDRC_REG,Copy_PinX);
 436:	a4 e3       	ldi	r26, 0x34	; 52
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e4 e3       	ldi	r30, 0x34	; 52
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 2e       	mov	r0, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_vidSetPinDirection+0x1e8>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_vidSetPinDirection+0x1e4>
 458:	84 2b       	or	r24, r20
 45a:	8c 93       	st	X, r24
 45c:	13 c0       	rjmp	.+38     	; 0x484 <__stack+0x25>
				break;
			case PORTD:
				SET_BIT(DDRD_REG,Copy_PinX);
 45e:	a1 e3       	ldi	r26, 0x31	; 49
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e1 e3       	ldi	r30, 0x31	; 49
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 2e       	mov	r0, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <__stack+0x1d>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__stack+0x19>
 480:	84 2b       	or	r24, r20
 482:	8c 93       	st	X, r24
	}
	else
	{
		/*  DO NOTHING  */
	}
}
 484:	27 96       	adiw	r28, 0x07	; 7
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	cf 91       	pop	r28
 492:	df 91       	pop	r29
 494:	08 95       	ret

00000496 <DIO_vidTogglePinVal>:

void DIO_vidTogglePinVal(u8 Copy_PortX, u8 Copy_PinX)
{
 496:	df 93       	push	r29
 498:	cf 93       	push	r28
 49a:	00 d0       	rcall	.+0      	; 0x49c <DIO_vidTogglePinVal+0x6>
 49c:	00 d0       	rcall	.+0      	; 0x49e <DIO_vidTogglePinVal+0x8>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PortX)
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	3c 83       	std	Y+4, r19	; 0x04
 4ae:	2b 83       	std	Y+3, r18	; 0x03
 4b0:	8b 81       	ldd	r24, Y+3	; 0x03
 4b2:	9c 81       	ldd	r25, Y+4	; 0x04
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	91 05       	cpc	r25, r1
 4b8:	51 f1       	breq	.+84     	; 0x50e <DIO_vidTogglePinVal+0x78>
 4ba:	2b 81       	ldd	r18, Y+3	; 0x03
 4bc:	3c 81       	ldd	r19, Y+4	; 0x04
 4be:	23 30       	cpi	r18, 0x03	; 3
 4c0:	31 05       	cpc	r19, r1
 4c2:	34 f4       	brge	.+12     	; 0x4d0 <DIO_vidTogglePinVal+0x3a>
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	9c 81       	ldd	r25, Y+4	; 0x04
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 05       	cpc	r25, r1
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <DIO_vidTogglePinVal+0x50>
 4ce:	5a c0       	rjmp	.+180    	; 0x584 <DIO_vidTogglePinVal+0xee>
 4d0:	2b 81       	ldd	r18, Y+3	; 0x03
 4d2:	3c 81       	ldd	r19, Y+4	; 0x04
 4d4:	23 30       	cpi	r18, 0x03	; 3
 4d6:	31 05       	cpc	r19, r1
 4d8:	71 f1       	breq	.+92     	; 0x536 <DIO_vidTogglePinVal+0xa0>
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	9c 81       	ldd	r25, Y+4	; 0x04
 4de:	84 30       	cpi	r24, 0x04	; 4
 4e0:	91 05       	cpc	r25, r1
 4e2:	e9 f1       	breq	.+122    	; 0x55e <DIO_vidTogglePinVal+0xc8>
 4e4:	4f c0       	rjmp	.+158    	; 0x584 <DIO_vidTogglePinVal+0xee>
				    {
				   case PORTA:

						toggle_bit(PORTA_REG,Copy_PinX);
 4e6:	ab e3       	ldi	r26, 0x3B	; 59
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	eb e3       	ldi	r30, 0x3B	; 59
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 2e       	mov	r0, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_vidTogglePinVal+0x6e>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_vidTogglePinVal+0x6a>
 508:	84 27       	eor	r24, r20
 50a:	8c 93       	st	X, r24
 50c:	3b c0       	rjmp	.+118    	; 0x584 <DIO_vidTogglePinVal+0xee>

				 	  break;
				   case PORTB:

						toggle_bit(PORTB_REG,Copy_PinX);
 50e:	a8 e3       	ldi	r26, 0x38	; 56
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	e8 e3       	ldi	r30, 0x38	; 56
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	48 2f       	mov	r20, r24
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	28 2f       	mov	r18, r24
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 2e       	mov	r0, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_vidTogglePinVal+0x96>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_vidTogglePinVal+0x92>
 530:	84 27       	eor	r24, r20
 532:	8c 93       	st	X, r24
 534:	27 c0       	rjmp	.+78     	; 0x584 <DIO_vidTogglePinVal+0xee>
					   break;
				   case PORTC:

						toggle_bit(PORTC_REG,Copy_PinX);
 536:	a5 e3       	ldi	r26, 0x35	; 53
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	e5 e3       	ldi	r30, 0x35	; 53
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	48 2f       	mov	r20, r24
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 2e       	mov	r0, r18
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_vidTogglePinVal+0xbe>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_vidTogglePinVal+0xba>
 558:	84 27       	eor	r24, r20
 55a:	8c 93       	st	X, r24
 55c:	13 c0       	rjmp	.+38     	; 0x584 <DIO_vidTogglePinVal+0xee>
					   break;
				   case PORTD:

						toggle_bit(PORTD_REG,Copy_PinX);
 55e:	a2 e3       	ldi	r26, 0x32	; 50
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e2 e3       	ldi	r30, 0x32	; 50
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_vidTogglePinVal+0xe6>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_vidTogglePinVal+0xe2>
 580:	84 27       	eor	r24, r20
 582:	8c 93       	st	X, r24

					   break;
				    }
}
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	cf 91       	pop	r28
 58e:	df 91       	pop	r29
 590:	08 95       	ret

00000592 <DIO_vidSetPortDirection>:

void DIO_vidSetPortDirection(u8 Copy_PortX, u8 Copy_Direction)
{
 592:	df 93       	push	r29
 594:	cf 93       	push	r28
 596:	00 d0       	rcall	.+0      	; 0x598 <DIO_vidSetPortDirection+0x6>
 598:	00 d0       	rcall	.+0      	; 0x59a <DIO_vidSetPortDirection+0x8>
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	6a 83       	std	Y+2, r22	; 0x02
	if(((Copy_PortX >= PORTA) && (Copy_PortX <= PORTD)))
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	88 23       	and	r24, r24
 5a6:	b1 f1       	breq	.+108    	; 0x614 <DIO_vidSetPortDirection+0x82>
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	85 30       	cpi	r24, 0x05	; 5
 5ac:	98 f5       	brcc	.+102    	; 0x614 <DIO_vidSetPortDirection+0x82>
	{
		switch(Copy_PortX)
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	28 2f       	mov	r18, r24
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	3c 83       	std	Y+4, r19	; 0x04
 5b6:	2b 83       	std	Y+3, r18	; 0x03
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	9c 81       	ldd	r25, Y+4	; 0x04
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	91 05       	cpc	r25, r1
 5c0:	d9 f0       	breq	.+54     	; 0x5f8 <DIO_vidSetPortDirection+0x66>
 5c2:	2b 81       	ldd	r18, Y+3	; 0x03
 5c4:	3c 81       	ldd	r19, Y+4	; 0x04
 5c6:	23 30       	cpi	r18, 0x03	; 3
 5c8:	31 05       	cpc	r19, r1
 5ca:	34 f4       	brge	.+12     	; 0x5d8 <DIO_vidSetPortDirection+0x46>
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
 5ce:	9c 81       	ldd	r25, Y+4	; 0x04
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	91 05       	cpc	r25, r1
 5d4:	61 f0       	breq	.+24     	; 0x5ee <DIO_vidSetPortDirection+0x5c>
 5d6:	1e c0       	rjmp	.+60     	; 0x614 <DIO_vidSetPortDirection+0x82>
 5d8:	2b 81       	ldd	r18, Y+3	; 0x03
 5da:	3c 81       	ldd	r19, Y+4	; 0x04
 5dc:	23 30       	cpi	r18, 0x03	; 3
 5de:	31 05       	cpc	r19, r1
 5e0:	81 f0       	breq	.+32     	; 0x602 <DIO_vidSetPortDirection+0x70>
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	9c 81       	ldd	r25, Y+4	; 0x04
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	91 05       	cpc	r25, r1
 5ea:	81 f0       	breq	.+32     	; 0x60c <DIO_vidSetPortDirection+0x7a>
 5ec:	13 c0       	rjmp	.+38     	; 0x614 <DIO_vidSetPortDirection+0x82>
		{
		case PORTA:
			DDRA_REG = Copy_Direction;
 5ee:	ea e3       	ldi	r30, 0x3A	; 58
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	80 83       	st	Z, r24
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <DIO_vidSetPortDirection+0x82>
			break;
		case PORTB:
			DDRB_REG = Copy_Direction;
 5f8:	e7 e3       	ldi	r30, 0x37	; 55
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	80 83       	st	Z, r24
 600:	09 c0       	rjmp	.+18     	; 0x614 <DIO_vidSetPortDirection+0x82>
			break;
		case PORTC:
			DDRC_REG = Copy_Direction;
 602:	e4 e3       	ldi	r30, 0x34	; 52
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	80 83       	st	Z, r24
 60a:	04 c0       	rjmp	.+8      	; 0x614 <DIO_vidSetPortDirection+0x82>
			break;
		case PORTD:
			DDRD_REG = Copy_Direction;
 60c:	e1 e3       	ldi	r30, 0x31	; 49
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	80 83       	st	Z, r24
	}
	else
	{
		/* DO Nothing */
	}
}
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <DIO_vidSetPortVal>:
void DIO_vidSetPortVal(u8 Copy_PortX, u8 Copy_Value)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	00 d0       	rcall	.+0      	; 0x628 <DIO_vidSetPortVal+0x6>
 628:	00 d0       	rcall	.+0      	; 0x62a <DIO_vidSetPortVal+0x8>
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	89 83       	std	Y+1, r24	; 0x01
 630:	6a 83       	std	Y+2, r22	; 0x02
	if(((Copy_PortX >= PORTA) && (Copy_PortX <= PORTD)))
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	88 23       	and	r24, r24
 636:	b1 f1       	breq	.+108    	; 0x6a4 <DIO_vidSetPortVal+0x82>
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	85 30       	cpi	r24, 0x05	; 5
 63c:	98 f5       	brcc	.+102    	; 0x6a4 <DIO_vidSetPortVal+0x82>
	{
		switch(Copy_PortX)
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	3c 83       	std	Y+4, r19	; 0x04
 646:	2b 83       	std	Y+3, r18	; 0x03
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	9c 81       	ldd	r25, Y+4	; 0x04
 64c:	82 30       	cpi	r24, 0x02	; 2
 64e:	91 05       	cpc	r25, r1
 650:	d9 f0       	breq	.+54     	; 0x688 <DIO_vidSetPortVal+0x66>
 652:	2b 81       	ldd	r18, Y+3	; 0x03
 654:	3c 81       	ldd	r19, Y+4	; 0x04
 656:	23 30       	cpi	r18, 0x03	; 3
 658:	31 05       	cpc	r19, r1
 65a:	34 f4       	brge	.+12     	; 0x668 <DIO_vidSetPortVal+0x46>
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	9c 81       	ldd	r25, Y+4	; 0x04
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	91 05       	cpc	r25, r1
 664:	61 f0       	breq	.+24     	; 0x67e <DIO_vidSetPortVal+0x5c>
 666:	1e c0       	rjmp	.+60     	; 0x6a4 <DIO_vidSetPortVal+0x82>
 668:	2b 81       	ldd	r18, Y+3	; 0x03
 66a:	3c 81       	ldd	r19, Y+4	; 0x04
 66c:	23 30       	cpi	r18, 0x03	; 3
 66e:	31 05       	cpc	r19, r1
 670:	81 f0       	breq	.+32     	; 0x692 <DIO_vidSetPortVal+0x70>
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	9c 81       	ldd	r25, Y+4	; 0x04
 676:	84 30       	cpi	r24, 0x04	; 4
 678:	91 05       	cpc	r25, r1
 67a:	81 f0       	breq	.+32     	; 0x69c <DIO_vidSetPortVal+0x7a>
 67c:	13 c0       	rjmp	.+38     	; 0x6a4 <DIO_vidSetPortVal+0x82>
		{
		case PORTA:
			PORTA_REG = Copy_Value;
 67e:	eb e3       	ldi	r30, 0x3B	; 59
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	80 83       	st	Z, r24
 686:	0e c0       	rjmp	.+28     	; 0x6a4 <DIO_vidSetPortVal+0x82>
			break;
		case PORTB:
			PORTB_REG = Copy_Value;
 688:	e8 e3       	ldi	r30, 0x38	; 56
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	80 83       	st	Z, r24
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <DIO_vidSetPortVal+0x82>
			break;
		case PORTC:
			PORTC_REG = Copy_Value;
 692:	e5 e3       	ldi	r30, 0x35	; 53
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	8a 81       	ldd	r24, Y+2	; 0x02
 698:	80 83       	st	Z, r24
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <DIO_vidSetPortVal+0x82>
			break;
		case PORTD:
			PORTD_REG = Copy_Value;
 69c:	e2 e3       	ldi	r30, 0x32	; 50
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	80 83       	st	Z, r24
	}
	else
	{
		/* DO Nothing */
	}
}
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	cf 91       	pop	r28
 6ae:	df 91       	pop	r29
 6b0:	08 95       	ret

000006b2 <main>:


/********************************	LAP 1			****************************************/

int main(void)
{
 6b2:	df 93       	push	r29
 6b4:	cf 93       	push	r28
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
	// output and low  initial value
	DIO_vidSetPinDirection(1,DIO_u8PIN_0,DIO_u8OUTPUT);
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(1,DIO_u8PIN_1,DIO_u8OUTPUT);
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	41 e0       	ldi	r20, 0x01	; 1
 6ca:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_vidSetPinDirection>

	DIO_vidSetPinVal(1,DIO_u8PIN_0,DIO_u8LOW);
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	0e 94 43 00 	call	0x86	; 0x86 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(1,DIO_u8PIN_1,DIO_u8LOW);
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	0e 94 43 00 	call	0x86	; 0x86 <DIO_vidSetPinVal>
	//input
	DIO_vidSetPinDirection(4,DIO_u8PIN_2,DIO_u8INPUT);
 6e2:	84 e0       	ldi	r24, 0x04	; 4
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(4,DIO_u8PIN_3,DIO_u8INPUT);
 6ec:	84 e0       	ldi	r24, 0x04	; 4
 6ee:	63 e0       	ldi	r22, 0x03	; 3
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_vidSetPinDirection>
	// PULL UP
	DIO_vidSetPinVal(4,DIO_u8PIN_2,DIO_u8HIGH);
 6f6:	84 e0       	ldi	r24, 0x04	; 4
 6f8:	62 e0       	ldi	r22, 0x02	; 2
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	0e 94 43 00 	call	0x86	; 0x86 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(4,DIO_u8PIN_3,DIO_u8HIGH);
 700:	84 e0       	ldi	r24, 0x04	; 4
 702:	63 e0       	ldi	r22, 0x03	; 3
 704:	41 e0       	ldi	r20, 0x01	; 1
 706:	0e 94 43 00 	call	0x86	; 0x86 <DIO_vidSetPinVal>

	SREG_REG.Bits.BIT_7 = 1;         //Enabling the Global Interrupt
 70a:	ef e5       	ldi	r30, 0x5F	; 95
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	80 68       	ori	r24, 0x80	; 128
 712:	80 83       	st	Z, r24

	MCUCR_REG.Bits.BIT_0 = 1;
 714:	e5 e5       	ldi	r30, 0x55	; 85
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	80 83       	st	Z, r24
	MCUCR_REG.Bits.BIT_1 = 0;        // Make the Trigger mode of INT0 "logical"
 71e:	e5 e5       	ldi	r30, 0x55	; 85
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	8d 7f       	andi	r24, 0xFD	; 253
 726:	80 83       	st	Z, r24

	MCUCR_REG.Bits.BIT_2 = 1;        // Make the Trigger mode of INT1 "logical  "
 728:	e5 e5       	ldi	r30, 0x55	; 85
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	84 60       	ori	r24, 0x04	; 4
 730:	80 83       	st	Z, r24
	MCUCR_REG.Bits.BIT_3 = 0;
 732:	e5 e5       	ldi	r30, 0x55	; 85
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	87 7f       	andi	r24, 0xF7	; 247
 73a:	80 83       	st	Z, r24

	GICR_REG.Bits.BIT_6 = 1 ;        // Set The PIE of INT0 to 1
 73c:	eb e5       	ldi	r30, 0x5B	; 91
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	80 64       	ori	r24, 0x40	; 64
 744:	80 83       	st	Z, r24
	GICR_REG.Bits.BIT_7 = 1 ;			// SET the PIE INT1 to 1
 746:	eb e5       	ldi	r30, 0x5B	; 91
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	80 68       	ori	r24, 0x80	; 128
 74e:	80 83       	st	Z, r24
 750:	ff cf       	rjmp	.-2      	; 0x750 <main+0x9e>

00000752 <__vector_1>:
	}
	return 0;
}

ISR(INT0_vect)
{
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
 774:	df 93       	push	r29
 776:	cf 93       	push	r28
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
	DIO_vidTogglePinVal(1,DIO_u8PIN_0);
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_vidTogglePinVal>
}
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	bf 91       	pop	r27
 78e:	af 91       	pop	r26
 790:	9f 91       	pop	r25
 792:	8f 91       	pop	r24
 794:	7f 91       	pop	r23
 796:	6f 91       	pop	r22
 798:	5f 91       	pop	r21
 79a:	4f 91       	pop	r20
 79c:	3f 91       	pop	r19
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <__vector_2>:

ISR(INT1_vect)
{
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	ef 93       	push	r30
 7ca:	ff 93       	push	r31
 7cc:	df 93       	push	r29
 7ce:	cf 93       	push	r28
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
	DIO_vidTogglePinVal(1,DIO_u8PIN_1);
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	61 e0       	ldi	r22, 0x01	; 1
 7d8:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_vidTogglePinVal>
}
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	ff 91       	pop	r31
 7e2:	ef 91       	pop	r30
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	7f 91       	pop	r23
 7ee:	6f 91       	pop	r22
 7f0:	5f 91       	pop	r21
 7f2:	4f 91       	pop	r20
 7f4:	3f 91       	pop	r19
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <_exit>:
 802:	f8 94       	cli

00000804 <__stop_program>:
 804:	ff cf       	rjmp	.-2      	; 0x804 <__stop_program>
